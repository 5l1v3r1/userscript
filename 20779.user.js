// Conquer Club - Card Counter, Card Redemption Value, Status Indicatorvar versionString = "3.5.1";//  //  This monkey is now called //             /////    ////   /////                   //  //  //  //  //  //                  /////   //  //  /////                   //  //  //  //  //  //                  /////    ////   /////      // Credit for the name goes to yeti_c// Temporary Territory Fix by mfontolan// 27-Aug-07 - Temp Clock Fix by mfontolan////  //    PLEASE READ ALL THE COMMENTS AT THE START OF THIS FILE BEFORE EDITING //  //-----------------------------------------------------------------------------// Installation//-----------------------------------------------------------------------------// This is a Greasemonkey user script.//// To use, first install Greasemonkey: http://greasemonkey.mozdev.org/// Then restart Firefox and revisit this script.// Under Tools, there will be a new menu item to "Install User Script".// Accept the default configuration and install.//// To uninstall, go to Tools/Manage User Scripts,// select "Conquer Club - BOB", and click Uninstall.////-----------------------------------------------------------------------------// Suggestions for future versions//-----------------------------------------------------------------------------// This is my record of the things that have been suggested but I haven't yet implemented// This is no gareentee that I will EVER implement the feature, you are welcome to have a go yourself, // and I am willing to consider merging your changes //  - Work out how to do "This is a team mate are you sure warning on fort.deploy.attack"//  - Map Click - selects country in drop down//-----------------------------------------------------------------------------// New features in Version BOB v1.2//-----------------------------------------------------------------------------// * Bug fix - Wraping on the Continents list// * Bug fix - "Confim" messages where broken//-----------------------------------------------------------------------------// New features in Version BOB v1.1//-----------------------------------------------------------------------------//  * Map Fade is a now a per MAP setting, Upgrading Users will inherit //      your CURRENT setting as a default for new maps, //      new installs will have 0% map fade as a default//  * Stats and Text Map are now live settings ( DO NOT REQUIRE A REFRESH TO CHANGE)//  * Confirm Items are now live settings (No refresh on change)//  * Team Stats//  * Bug Fix - New map had inconsistent spaces in name//-----------------------------------------------------------------------------// New features in Version BOB v1.0//-----------------------------------------------------------------------------//  * New Name - BOB - Thanks yeti_c//  * Bug fix - Assassin target Broke the card counter;//  * Bug fix - this script broke the Dice Analyzer Menu Item//  * Popup message if any previous version of the script is detected.//  * changed the highlight on a SAFE territory - SAFE means that all it's borders are owned by a member of the same team.//-----------------------------------------------------------------------------// New features in Version RJS.9//-----------------------------------------------------------------------------//  * Add Click and Flash effect to text map, and continent list in the stats table//  * Include Fortify Button in the confirm actions option for Non Unlimited Games//  * Change card calculations to be read from the page (rather than worked out from the log)//  * change clock display to not be editable - thanks weirdbro.//  * Colour code the action drop downs on all moves to show the colour of the player//      who owns that territory and the number of the armies in the territory.//  * Add Stats modes - Standard|Extended|Off This controls the level of detail//      in the stats table.//  * Lots of work to improve performance//  * Add Version number to menu title//-----------------------------------------------------------------------------// New features in Version RJS.8//-----------------------------------------------------------------------------//  * Add hover to the cards in the my cards list.//  * Change the text map to offer two versions (Standard and Extended)//  * Hover Highlight now includes those territories that can attack the selected one as well as the ones that you can attack //  * Change the Map Inspect text line to show territories you can attack and territories that can attack you//  * Change the clock format option to  Off|24h|am/pm//  * Added Help Popup-  thanks cicero.//  * Bug Fix : Jump to map option refesh was not working correctly//  * Formatting Change AM/PM -> am/pm & add leading 0 to 24h clock//  * Bug Fix : Map fade 0% prevented menu from working correctly, thanks weirdbro//  * Bug Fix : Some menu items where updating the wrong menu text when clicked, thanks weirdbro//  * Split confirm actions into two options - Confirm Deploy and Confirm Auto-Attack//  * Consolidate Duplicated Continent Names //  * Adds a points summary to the end of the log in Terminator games.//-----------------------------------------------------------------------------// New features in Version RJS.7//-----------------------------------------------------------------------------//  * Add Team Rollover//  * Remove Card Count from player list//  * add site style card count to stats table//  * move missed turns to it's own column//  * Bug fix - map inspect, the status bar was not hiding if the option was turned off//  * Tweak the options order to move the options that are changed more often to the top.//  * Merge Ishiro's confim attacks script, and add options to control it.//  * Merge TAHITIWAHINI's estimate of armies from cards (with option to hide it) - I put it in it's own column//-----------------------------------------------------------------------------// New features in Version RJS.6//-----------------------------------------------------------------------------//  * Adds Options Menu and moves settings into browser storage.//    There is no longer any need to edit the script to change options; it is done using the on page menu.//  * Handle Special case of playername in log not matching playername in player list ( See Game 332574)//-----------------------------------------------------------------------------// New features in Version RJS.5//-----------------------------------------------------------------------------//  * Add Inspect - show information on hover//  * Change map highlights to be fully transparent//  * Add Continents information to statistics table.//  * Bug fix in statistics table: Changed the * indicator next to Territories//      to show * to indicate taking 1 territory will lose an army ** take 2 and *** take 3.//    [Indicated the wrong number of armies in previous versions.]//-----------------------------------------------------------------------------// New features in Previous Versions//-----------------------------------------------------------------------------//  * Add map fade - makes the numbers stand out more.//                 - includes user option to control how much fade.//  * Add finish time to clock - appends "Tomorrow @ 07:23" (for example) after time remaining//  * Add text only version of map - off by default as it takes up a lot of space//  * Add calculation of continent bonus - included in calculation of armies due next turn//  * Add missed turn counter - included in calculation of armies due next turn//  * Add hover highlights to map and player names//-----------------------------------------------------------------------------// Features in Tr0y's origninal version//-----------------------------------------------------------------------------//  * Adds card redemption values//  * Adds dynamic countdown timer//  * Adds statistics//  * Automatically jumps to map//-----------------------------------------------------------------------------//  Meta Data - required for Greasemonkey//-----------------------------------------------------------------------------// ==UserScript==// @name          Conquer Club - BOB// @namespace     http://robertstocks.co.uk/conquerClub// @description   BOB Script// @include       http://*conquerclub.com*// ==/UserScript==// //-----------------------------------------------------------------------------// DO NOT EDIT BELOW THIS ( unless you know what you are doing )//-----------------------------------------------------------------------------// NO REALLY, THERE IS NO NEED TO EDIT THIS FILE ALL OPTIONS ARE CONTROLLED BY THE GAME MENU//////  I mean it dont even read past here// If you are still reading then on your own head be it, however pleaae post your modification to this thread// http://www.conquerclub.com/forum/viewtopic.php?t=33445 so that I can look at improving the script.//-----------------------------------------------------------------------------//  DEFAULT OPTIONS SETTINGS//-----------------------------------------------------------------------------// THERE IS NO POINT IN EDITING THESE: CHANGES HERE WILL HAVE NO EFFECT// There are TWO ways to edit the settings, EASY WAY: Use the new settings menu.// HARD WAY. Go to about:Config in FireFox and - Search for BOB.OPTIONS.// Then Edit that value - BE CAREFULL if you get the format wrong the script will crash, // if you crash it and want to recover, set that option value to exactly the next 4 chars ({}) // this will re load the defaults below.var DEFAULT_OPTIONS = new Object();DEFAULT_OPTIONS['jumptomap'] = false;DEFAULT_OPTIONS['textMapType'] = "Standard";DEFAULT_OPTIONS['fadeMap'] = 1; // 0 = No Fade  1 = Total WhiteOutDEFAULT_OPTIONS['MapLeft'] = 0;DEFAULT_OPTIONS['MapTop'] = 0;DEFAULT_OPTIONS['24hourClockFormat'] = "am/pm";DEFAULT_OPTIONS['mapInspect'] = true;DEFAULT_OPTIONS['confirmEnds'] = true;DEFAULT_OPTIONS['confirmAutoAttack'] = true;DEFAULT_OPTIONS['confirmDeploy'] = true;DEFAULT_OPTIONS['statsMode'] = "Extended";DEFAULT_OPTIONS['floatActions'] = "Off";DEFAULT_OPTIONS['hideMenu'] = "Off";var startLogTime = Math.round((new Date()).getTime()/1000)var Logging =  "";//-------------------------------------------------------------------------//    FUNCTIONS//-------------------------------------------------------------------------function cc_log (m) {	Logging += Math.round((new Date()).getTime()/1000)-startLogTime + ":" + m + "<br />" }// Altered to allow partial matches... player matches player1 ... 2 etc.function getElementsByClassName(oElm, strTagName, strClassName){        var arrElements = (strTagName == "*" && document.all)? document.all : oElm.getElementsByTagName(strTagName);        var arrReturnElements = new Array();        strClassName = strClassName.replace(/\-/g, "\\-");        var oRegExp = new RegExp("(^|\\s)" + strClassName + "(\\s)");        var oElement;        for(var i=0; i<arrElements.length; i++){            oElement = arrElements[i];            if(oElement.className.has(strClassName)){                arrReturnElements.push(oElement);            }        }        return (arrReturnElements)}//mfontlans zslash functionfunction zslash(svalue, iwidth){   var szero = String(svalue);   var ch = szero.substr(0,1);   while (ch == ' ')   {      szero = szero.substr(1, szero.length);      ch = szero.substr(0,1);   }   ch = szero.substr(szero.length - 1, szero.length);   while (ch == ' ')   {      szero = szero.substr(0, szero.length - 1);   ch = szero.substr(szero.length - 1, szero.length);   }      var i=0;   for (i=0; i < (iwidth - szero.length); i++)   {      szero = '0' + szero;   }      return szero;}     function countDown(){	var clock = document.getElementById('clock');	        --seconds1;        if(seconds1 < 0 ){            --minutes1;            if( minutes1 < 0 ){                --hours1;                if( hours1 < 0 ){                    hours1 = 0;                    if( minutes1 <= 0 && seconds1 <= 0 ){                        clearInterval(clockInterval);//No more counting down                        //No weird negative #s                        minutes1= 0;                        seconds1 = 0;                        return;                    }                }                minutes1 = 59;            }            seconds1 = 59;        }//	clock.innerHTML = hours1+'hrs '+minutes1+'min '+seconds1+'sec';	//mfontlans clock fix.	var clockFormat = myOptions['24hourClockFormat'];        var currentTime = new Date();        var hours = currentTime.getHours();        var minutes = currentTime.getMinutes();        var day = ' @ ';        var ampm = '';        minutes = (minutes + minutes1);        if (minutes >= 60) {                hours = hours + 1;                minutes = minutes - 60;            }        hours = (hours + hours1);        if (hours >= 24)            {                day = "tomorrow @ ";                hours = hours - 24            }        else        {                day = "today @ ";        }            if (clockFormat == "am/pm") {                ampm = " am";                if (hours >= 12)                {                    ampm = " pm";                    hours = hours - 12;                }                if (hours == 0) hours = 12;            }       	clock.innerHTML =  zslash(hours1, 2) + 'hrs ' + zslash(minutes1, 2) + 'min ' + zslash(seconds1, 2) + 'sec';        if (clockFormat !="Off") 	{             clock.innerHTML += ' [' + day + "<b>" + zslash(hours, 2) + ":" + zslash(minutes, 2) + ampm + "</b>]"        }   // yowsers clock fix/*   if( hours1 < 10)   {      clock.innerHTML = '0'+hours1+'hrs ';   }   else   {      clock.innerHTML = hours1+'hrs ';   }   if( minutes1 < 10)   {      clock.innerHTML = clock.innerHTML+'0'+minutes1+'min ';   }   else   {      clock.innerHTML = clock.innerHTML+minutes1+'min ';   }   if( seconds1 < 10)   {      clock.innerHTML = clock.innerHTML+'0'+seconds1+'sec';   }   else   {      clock.innerHTML = clock.innerHTML+seconds1+'sec';   } */}function calcRedemption(){        if( m_bonusCards == eBonusCards.ESCALATING )	{		if( num_turnins < 5 ) 			return num_turnins * 2 + 4;		else 			return num_turnins * 5 - 10;        } 	else if( m_bonusCards == eBonusCards.FLATRATE) 		return 7;        return 0; //no cards}function calcArmiesNextTurn(countries){        if( countries < 12 ) return 3;        return Math.floor(countries/3);}//---- Returns probability of a tunin - http://www.kent.ac.uk/IMS/personal/odl/riskfaq.htm#3.5 ----function getTurnInP(num_cards){        if( num_cards < 3 ) return 0;        if( num_cards > 4 ) return 1;        if( num_cards == 3 ) return 0.3341;        return 0.778; // has 4 cards}// START TAHITIWAHINI ARMIES FROM CARDS CALCULATIONS// The following functions are derived from the calculations at:// http://www.conquerclub.com/forum/viewtopic.php?t=15620    // Returns the probability of having a set // when holding the given number of cards.function getSetProbability(cards) {        if (cards < 3) return 0;        if (cards == 3) return 0.333333;        if (cards == 4) return 0.777778;        if (cards >= 5) return 1;        return -1;}        // Returns the number of armies expected from cashing in    // a set when holding the given number of cards.function getArmiesFromCardSet(cards) {        if (m_bonusCards != eBonusCards.FLATRATE) {            return getSetProbability(cards) * calcRedemption();        } else {            if (cards < 3) return 0;            if (cards == 3) return 2.888889;            if (cards == 4) return 5.333333;            if (cards >= 5) return 7.333333;            return -1;        }}      // Returns the number of armies received from owning countries.function getArmiesFromCountries(countries, continentBonus, missedTurns) {        return (calcArmiesNextTurn(countries) + continentBonus) * (missedTurns + 1);}    // Returns the estimated number of armies due for cashing in a set // of cards.function getEstimatedArmiesFromCards(cards, countries, totalCountries) {        return getArmiesFromCardSet(cards) + (6 * getSetProbability(cards) * (countries / totalCountries));}    // Returns the total number of armies expected for the next turn.function getTotalExpectedArmies(countries, continentBonus, missedTurns, cards, totalCountries) {        return getArmiesFromCountries(countries, continentBonus, missedTurns) + getEstimatedArmiesFromCards(cards, countries, totalCountries);}// Returns the calculated strength of a players position rounded to the // nearest hundreth.function getStrength(currentArmies, expectedArmies, countries) {        return Math.round ((currentArmies + expectedArmies - ((2 / 3) * countries)) * 100) / 100;}    // END TAHITIWAHINI ARMIES FROM CARDS CALCULATIONSfunction GET_MAPFADE(OPTIONS,mapName) {	var fade = 1;	if (typeof(OPTIONS["fadeMap:"+mapName])=="undefined")         {            fade = OPTIONS["fadeMap"];        }        else        {            fade = OPTIONS["fadeMap:" + mapName];        }	// force Opacity to not be 0.	if (fade==0)	{		return 1;	}	else	{		return fade;	}}function APPLY_MAPFADE(OPTIONS,mapName) {         var fm = document.getElementById("outer-map");        fm.style.opacity = GET_MAPFADE(OPTIONS,mapName);}   function APPLY_TEXTMAP(OPTIONS) {	if (OPTIONS['textMapType']!="Off")	{		if (OPTIONS['textMapType']=="Standard") 		{ 			textMap.innerHTML = "<h3>Text Map</h3><table align=center style='width:100%;border:1px solid #FFF;background:#eee;' rules=rows >" + txtMapSmallHtml + "</table>";		}		else 		{			textMap.innerHTML = txtMapHtml;		}	}	else	{		textMap.innerHTML = "";	}}function teamNumber(pid) {	// OK game type = doubles        //  0 = 0, 1&2 = 1, 3&4 = 2, 5&6 = 3 7&8 = 4        // game type = triples        //  0 = 0, 1&2&3 = 1, 4&5&6 = 2        // Other Games Team=PID        var tid = pid;                if (pid!=0 && m_gameType == eGameType.DOUBLES) {            if (pid==1 || pid == 2) {                tid = 1;            }else if (pid==3 || pid == 4) {                tid = 2;            }else if (pid==5 || pid == 6) {                tid = 3;            }else {                tid = 4;            }        }        else if (pid!=0 && m_gameType == eGameType.TRIPLES) {            if (pid==1 || pid == 2 || pid == 3) {                tid = 1;            }else {                tid = 2;            }        }         else if (pid!=0 && m_gameType == eGameType.QUADRUPLES) {            if (pid==1 || pid == 2 || pid == 3 || pid == 4) {                tid = 1;            }else {                tid = 2;            }        }         return tid;}    function isTeamGame() {	return m_gameType == eGameType.DOUBLES || m_gameType == eGameType.TRIPLES || m_gameType == eGameType.QUADRUPLES;}function makeTableCellTextWorker(bEliminated,pid, strText,bwrap) {	if (pid==UID)		pid=0;        return "<td" + (bwrap?"":" nowrap") +"><span " + (bEliminated ? "class=eliminated" : "" ) + "><span class='player"+ pid +"'>"+  strText +  " </span></span></td>\n" }function makeTableCellText(bEliminated,pid, strText,bwrap) {        return makeTableCellTextWorker(bEliminated,pid, strText,false) ;}function makeTableCellTextWrap(bEliminated,pid, strText) {        return makeTableCellTextWorker(bEliminated,pid, strText,true) ;}function APPLY_STATS(OPTIONS) {            if (OPTIONS["statsMode"] == "Off") {            stats.innerHTML = "";        }        else if (OPTIONS["statsMode"] == "Standard") {            stats.innerHTML = statsStr2;        }        else // Extended        {            stats.innerHTML = statsStr;        }}// Static enums - now globalised//Game Enumerationsvar eGameType = { TERMINATOR:0, STANDARD:1, DOUBLES:2, TRIPLES:3, QUADRUPLES:4, ASSASSIN:5 }var ePlayOrder = { NDTFREESTYLE: 0, FREESTYLE:1, SEQUENTIAL:2 }var eBonusCards = { NOCARDS:0, FLATRATE:1, ESCALATING:2 }// globalise variable to easily function out calls.var m_gameType;var m_bonusCards;var fog = false;var log;var logDiv = document.getElementById('log');var rightside = document.getElementById('right_hand_side');var dashboard = document.getElementById('dashboard');var map = document.getElementById('outer-map');var armies = document.getElementById('armies');var colourBlind;//---- Prototyping ----String.prototype.has = function(key) { return this.indexOf(key) > -1; }String.prototype.makeID = function() { return this.replace(/ /g,"_").replace(/'/g,"_").replace(/#/g,"_").replace(/\?/g,"_"); }String.prototype.trim = function() { return this.replace(/^\s+|\s+$/g, ''); };String.prototype.normiliseSpaces = function() { return this.replace(/  /g," ").trim(); }var jtm = function jtm() {window.location.hash="map-cell";}//-------------------------------------------------------------------------//    VARIABLE DECLARATIONS//-------------------------------------------------------------------------//---- Gameplay ----var num_turnins = 0;var stored_num_turnins = 0;var stored_skipped = new Array();var stored_terminator_summary;var stored_territories = new Array();var stored_last_bonus = new Array();var num_players = 0;var m_playOrder;var RedemptionValue;var redemption;var pIndxs;var smallwidth;var smallheight;var largewidth;var largeheight;//---- Player ----var NID = 0; // Neutral IDvar UID = 0; // Unknown ID <-- set to 0 here to ensure a value always setvar pl_Colors = new Array("666","f00","090","00f","cc0","0cc","f0f");//Player Colors    var pl_cbIDs = new Array("n","r","g","b","y","t","p"); //Color Blind Identifiers//---- Misc ----var i;var tmp;var re;var pid; // player identifiervar name; // tmp namevar mapName;var mapSize;var textMap;var txtMapHtml;var txtMapSmallHtml;var txtMapSmallHtml2;var txtMapSmallOwner;var bDone;var RedemptionValue=0;var stats;var statsStr = "";var statsStr2 = "";var totalArmies = 0;var totalCountries = 0;var totalStartCountries = 0;//---- Clock ----var today = new Date();var time = new Array();// { hh, mm, ss }var timeStr;var timeLocStr;var timeLoc;//location of the timevar timeindexOffset;//location of the time + the index ( hr, min, or sec )var timeWIDTH = 18;var clock;var clockInterval;var hours1;var minutes1;var seconds1;var colourblind = unsafeWindow.colourblind;function gm_ConquerClubGame(OPTIONS){        cc_log("Starting");//    ---- Check for Required Components ----    //If we cannot find any of the following just quit out.    if( !( logDiv && rightside && dashboard && armies) ) return;    timeLocStr = rightside.innerHTML.has('<span class="countdown-alert">')?'<h4 id="time-remaining">Time Remaining</h4>\n<span id="clock"><span class="countdown-alert">':'<h4 id="time-remaining">Time Remaining</h4>\n<span id="clock">';//    ---- Object Stuff ----    //Player Class    function Player( name, pid, color ){        this._name = name;        this._pid = pid;        this._color = color;        this._cards = 0;        this._armies = 0;        this._countries = 0;	this._calculatedCountries = 0;        this._continentBonus = 0;        this._territoryBonus = 0;	this._lastBonus = 0;	this._lastBonusFixed = false;	this._deferred = 0;        this._skipped = 0;        this._continents = new Array();        this.toString = function() { return  this._name; }        this.getArmiesPerTurn = function() { if( this._countries < 12 ) return 3; return Math.floor(this._countries/3); }        this.getTurninP = function() { if( this._cards < 3 ) return 0; if( this._cards > 4 ) return 1; if( this._cards == 3 ) return 0.3341; return 0.778; }        this.alert = function() {            alert(    "Name:\t"            +    this._name        +                    "\nPID:\t"            +    this._pid        +                    "\nCards:\t"        +    this._cards        +                    "\nArmies:\t"        +    this._armies    +                    "\nCountries:\t"    +    this._countries +                    "\nArmies/Turn:\t"  +    this.getArmiesPerTurn()            );        }        this.killToReduce = function() {             if( this._countries < 12 ) return "-";             var rem = (this._countries/3 - Math.floor(this._countries/3));                return (rem==0)?"*": ( rem < 0.5 ? "**" : "***") ;             }        this.calcKillToReduce = function() {             if( this._calculatedCountries < 12 ) return "-";             var rem = (this._calculatedCountries/3 - Math.floor(this._calculatedCountries/3));                return (rem==0)?"*": ( rem < 0.5 ? "**" : "***") ;             }    this.ContinentsDisplay = function ContinentsDisplay()     {        var ret = "";        var contSum = new Array();        var flashList = new Array();        for (var cntn  in this._continents)         {            var ctn = continentsArray[this._continents[cntn]];            if (typeof(contSum[ctn._name])=="undefined")                {                    contSum[ctn._name] =  ctn._bonus;                    flashList[ctn._name] =  ctn._realName;                }                else                 {                    contSum[ctn._name] += ctn._bonus;                    flashList[ctn._name] +=  "," + ctn._realName;                }                    }        for (var cntnn  in contSum )         {            ret += '<span class="JumpClick" title="' + flashList[cntnn] + '">' + cntnn.replace(" ","&nbsp;") + "&nbsp(" + contSum[cntnn] + ") </span>";        }        var contSum = new Array();        var flashList = new Array();        for (country in countriesArray)         {		var cnt = countriesArray[country];		if ((cnt._bonus!=0) && (cnt._pid == this._pid))		{			if (typeof(contSum[cnt._name])=="undefined")                	{                    		contSum[cnt._name] =  cnt._bonus;                    		flashList[cnt._name] =  cnt._name;                	}			else 			{				contSum[cnt._name] += cnt._bonus;				flashList[cnt._name] +=  "," + cnt._name;			}		}        }        for (var cntnn  in contSum )         {            ret += '<span class="clickJump" title="' + flashList[cntnn] + '">' + cntnn.replace(" ","&nbsp;") + "&nbsp[" + contSum[cntnn] + "] </span>";        }        return ret;    }    }        // Country Class    function Country (name,pid,armies) {        this._name = name;        this._pid = pid;        this._armies = armies;        this.toString = function() { return this._name; }        this._borders = new Array();        this._DefendBorders = new Array();        this._AttackBorders = new Array();        this._bombards = new Array();        this._bombardedBy = new Array();        this._inContenent = false;	this._bonus = 0;        this._smallxPos = 0;        this._smallyPos = 0;        this._largexPos = 0;        this._largeyPos = 0;        this.isSafe = function () {            var howSafe = 2;                       for (var k =0; k < this._borders.length && howSafe > 0; k++){                var bb = countriesArray[this._borders[k]];                if (bb._pid != this._pid) {                    // it's not mine                    howSafe = 1                    if (teamNumber(bb._pid) != teamNumber(this._pid)) {                        // And it's not team                        howSafe = 0                                            }                }            }            for (var k =0; k < this._DefendBorders.length && howSafe > 0; k++){                var bb = countriesArray[this._DefendBorders[k]];                if (bb._pid != this._pid) {                    // it's not mine                    howSafe = 1                    if (teamNumber(bb._pid) != teamNumber(this._pid)) {                        // And it's not team                        howSafe = 0                                            }                }            }            return howSafe;        }        this.textMap = function () {             var txtMapHtml2 = "";            var txtMapHtmlA = "";            var txtMapHtmlD = "";            var txtMapHtmlC = "";            var txtMapHtmlE = "";            var txtMapHtmlF = "";            var aAttack = new Array();            var aDefend = new Array();                        for (var k =0; k < this._borders.length; k++){                var bb = countriesArray[this._borders[k]];                aAttack[bb._name] = bb;            }            for (var k =0; k < this._DefendBorders.length; k++){                var bb = countriesArray[this._DefendBorders[k]];                aDefend[bb._name] = bb;            }                                        txtMapHtml2 += this.displayString();                     for (var k =0; k < this._borders.length; k++){                        var bb = countriesArray[this._borders[k]];                         if (typeof(aDefend[bb._name])=="undefined"){                                txtMapHtmlA +=  bb.displayString();                            }                            else                            {                                txtMapHtmlC +=  bb.displayString();                            }                    }                    //txtMapHtml2 += ' ] <= [';                                        for (var k =0; k < this._DefendBorders.length; k++)		    {                        var bb = countriesArray[this._DefendBorders[k]];                                                if (typeof(aAttack[bb._name])=="undefined")			{                                txtMapHtmlD += bb.displayString();                        }                    }                    for (var k =0; k < this._bombards.length; k++)		    {                        var bb = countriesArray[this._bombards[k]];                        txtMapHtmlE += bb.displayString();                    }                    for (var k =0; k < this._bombardedBy.length; k++)		    {                        var bb = countriesArray[this._bombardedBy[k]];                        txtMapHtmlF += bb.displayString();                    }                    if (txtMapHtmlC != "") 		    {                        txtMapHtml2 += ' <=> [ ' + txtMapHtmlC + ' ]';                    }                    if (txtMapHtmlA != "") 		    {                        txtMapHtml2 += '<br> Attack only [ ' + txtMapHtmlA + ' ]';                    }                    if (txtMapHtmlD != "") 		    {                        txtMapHtml2 += '<br> Defend only [ ' + txtMapHtmlD + ' ]';                    }                    if (txtMapHtmlE != "") 		    {                        txtMapHtml2 += '<br> Bombards [ ' + txtMapHtmlE + ' ]';                    }                    if (txtMapHtmlF != "") 		    {                        txtMapHtml2 += '<br> Bombarded by [ ' + txtMapHtmlF + ' ]';                    }                                                        return  txtMapHtml2;         }         this.displayString = function () 	 {		var pid = this._pid;	 	if (pid == UID)			pid = NID;		result = '<span class="player' + pid + '"><span class="clickJump" title="' + this._name + '" >'  + this._name + ' (' +  this._armies + ')';		if (this._bonus != 0)			result += ' ['+this._bonus+']';		result += '</span> </span>';		return result;         }    }    // Continent Class    function Continent (name,bonus,realname) {        this._name = name;        this._realName = realname;        this._bonus = bonus;        this.toString = function() { return this._name; }        this._countrys = new Array();        this._owner = -1;	this._overrides = new Array(); // Hold overriders for this continent.	this._overriden = false;        this.alert = function() {            alert(    "Name:\t"            +    this._name        +                    "\nrealName:\t"            +    this._realName        +                    "\nBonus:\t"        +    this._bonus        +                    "\nCountries:\t"    +    this._countrys +                    "\nOverrides:\t"    +    this._overrides +                    "\nOwner:\t"  +    this._owner +                    "\nOverriden:\t"    +    this._overriden);        }    }    //Partial Continent Class    function PartialContinent (name,bonus,required,realname) {        this._name = name;        this._realName = realname;        this._bonus = bonus;	this._required = required;        this.toString = function() { return this._name; }        this._countrys = new Array();        this._owners = new Array(); // hold the owners of this continent (note could be many more than one)	this._overrides = new Array(); // Hold overriders for this continent.	this._overriden = new Array(); // hold an array to match the owners to say if this is overriden or not.	this.clearOwners = function() // clean out owners array - called before processing.		{			this._owners = new Array();			this._overriden = new Array();		}        this.alert = function() {            alert(    "Name:\t"            +    this._name        +                    "\nrealName:\t"            +    this._realName        +                    "\nBonus:\t"        +    this._bonus        +                    "\nRequired:\t"        +    this._required        +                    "\nCountries:\t"    +    this._countrys +                    "\nOverrides:\t"    +    this._overrides +                    "\nOwners:\t"  +    this._owners +                    "\nOverriden:\t"    +    this._overriden);        }    }	function objective (name, realname)	{		this._name = name;		this._realname = realname;		this._countrys = new Array();		this._owner = -1;	}            //-------------------------------------------------------------------------    //    INIT    //-------------------------------------------------------------------------//    ---- Start Clock ----/*    tmp = rightside.innerHTML.indexOf(timeLocStr);//to make sure there is a clock.    if( tmp > -1 ){        timeLoc = tmp + timeLocStr.length ;        tmp = rightside.innerHTML;        timeStr = tmp.substring(timeLoc,timeLoc + timeWIDTH);                time = timeStr.split(/hrs\n|min\n|sec\n/);        var currentTime = new Date();        var hours = currentTime.getHours();        var minutes = currentTime.getMinutes();        var day = ' @ ';        var ampm = ' ';                  minutes = (minutes + parseInt(time[1]));        if (minutes >= 60) {                hours = hours + 1;                minutes = minutes - 60;            }                if (time[0][0] == '0')        {            time[0] = time[0][1];        }        hours = (hours + parseInt(time[0]));        if (hours >= 24)             {                day = "tomorrow @ ";                hours = hours - 24            }            if (OPTIONS['24hourClockFormat']=="am/pm") {                ampm = " am";                if (hours >= 12)                {                    ampm = " pm";                    hours = hours - 12;                }                 if (hours == 0) hours = 12;             }        else        {            if (hours < 10)            {                hours = "0" + hours;            }        }                if (minutes < 10)            minutes = "0" + minutes;                if (OPTIONS['24hourClockFormat']!="Off") {            clock =  day + "<b>" + hours + ":" + minutes + ampm + " " + "</b>"        }        else        {            clock = ""        }        hours1 = parseInt(time[0]);        minutes1 = parseInt(time[1]);        seconds1 = parseInt(time[2]);        clockInterval = window.setInterval(countDown,1000);    }*/    // Yowsers clock fix    tmp = rightside.innerHTML.indexOf(timeLocStr);//to make sure there is a clock.    if( tmp > -1 ){        timeLoc = tmp + timeLocStr.length ;        tmp = rightside.innerHTML;        timeStr = tmp.substring(timeLoc,timeLoc + timeWIDTH);               time = timeStr.split(/hrs\n|min\n|sec\n/);        var currentTime = new Date();        var hours = currentTime.getHours();        var minutes = currentTime.getMinutes();        var day = ' @ ';        var ampm = ' ';                 minutes = (minutes + parseInt(time[1],10));        if (minutes >= 60) {                hours = hours + 1;                minutes = minutes - 60;            }               if (time[0][0] == '0')        {            time[0] = time[0][1];        }        hours = (hours + parseInt(time[0],10));        if (hours >= 24)            {                day = "tomorrow @ ";                hours = hours - 24            }            if (OPTIONS['24hourClockFormat']=="am/pm") {                ampm = " am";                if (hours >= 12)                {                    ampm = " pm";                    hours = hours - 12;                }                if (hours == 0) hours = 12;            }        else        {            if (hours < 10)            {                hours = "0" + hours;            }        }               if (minutes < 10)            minutes = "0" + minutes;               if (OPTIONS['24hourClockFormat']!="Off") {            clock =  day + "<b>" + hours + ":" + minutes + ampm + " " + "</b>"        }        else        {            clock = ""        }        hours1 = parseInt(time[0],10);        minutes1 = parseInt(time[1],10);        seconds1 = parseInt(time[2],10);        clockInterval = window.setInterval(countDown,1000);    }     // is this game with fog of war on?    if (dashboard.innerHTML.indexOf("Fog of War: <b>Yes")!=-1)    {	fog = true;    }    prepareMenuHider();       if (OPTIONS["floatActions"] == "On")    {	var actionForm = document.getElementById('action-form');	if (actionForm)	{		actionForm.style.position='fixed';		actionForm.style.bottom=0;		actionForm.style.zIndex=1;	}	var outerRolls = document.getElementById('outer-rolls');	if (outerRolls)	{		outerRolls.style.position='fixed';		outerRolls.style.backgroundColor="#FFFFFF";		outerRolls.style.top=0;		outerRolls.style.zIndex=1;	}    }//    ---- Create Divisions ----    stats = document.createElement('div');    stats.id="statsTable";    dashboard.parentNode.insertBefore(stats, logDiv.previousSibling.previousSibling);    stats.style.margin = '10px 0 0 0';//     Create text map     textMap = document.createElement('div');    textMap.id="textMap";    dashboard.parentNode.insertBefore(textMap, logDiv.previousSibling.previousSibling);    textMap.style.margin = '10px 0 0 0';//    ---- Get Game Modes ----    if( dashboard.innerHTML.has("Sequential") )         {            m_playOrder = ePlayOrder.SEQUENTIAL;        }    else         {            if( dashboard.innerHTML.has("Freestyle (no double turns)") )                m_playOrder = ePlayOrder.NDTFREESTYLE;            else                m_playOrder = ePlayOrder.FREESTYLE;        }//    ---- Get Game Type ----    if (dashboard.innerHTML.has("Doubles") ) m_gameType = eGameType.DOUBLES;    else if (dashboard.innerHTML.has("Triples") ) m_gameType = eGameType.TRIPLES;    else if (dashboard.innerHTML.has("Quadruples") ||  dashboard.innerHTML.has("Game Type: <b></b>")) m_gameType = eGameType.QUADRUPLES;    else if (dashboard.innerHTML.has("Terminator") ) m_gameType = eGameType.TERMINATOR;    else if (dashboard.innerHTML.has("Assassin") ) m_gameType = eGameType.ASSASSIN;    else m_gameType = eGameType.STANDARD;//     --- Add Styles ---/*#7F7F7F Neutral Grey#FF0000 Red#009A04 Green#0000FF Blue#FFFF00 Yellow#00FFFF Cyan#FF00FF Pink #FF9922 Orange#FFFFFF White*/    GM_addStyle(' #outer-map { position:relative;} ' +                ' #inner-map img { position:absolute;} ' +                 ' #magicmap div   { height: 18px; height: 100%; width: 100%; position:absolute; opacity:0.0;} ' +                 ' #magicmap .hplayer0  {  opacity:1.5; border:thick solid #7F7F7F;} ' +                 ' #magicmap .hplayer1  {  opacity:1.5; border:thick solid #FF0000;} ' +                 ' #magicmap .hplayer2  {  opacity:1.5; border:thick solid #009A04;} ' +                 ' #magicmap .hplayer3  {  opacity:1.5; border:thick solid #0000FF;} ' +                 ' #magicmap .hplayer4  {  opacity:1.5; border:thick solid #FFFF00;} ' +                 ' #magicmap .hplayer5  {  opacity:1.5; border:thick solid #00FFFF;} ' +                 ' #magicmap .hplayer6  {  opacity:1.5; border:thick solid #FF00FF;} ' +                ' #magicmap .hplayer7  {  opacity:1.5; border:thick solid #FF9922;} ' +                ' #magicmap .hplayer8  {  opacity:1.5; border:thick solid #FFFFFF;} ' +                ' #magicmap .lplayer0  {  opacity:0.0; border:thick solid #7F7F7F;} ' +                 ' #magicmap .lplayer1  {  opacity:0.0; border:thick solid #FF0000;} ' +                 ' #magicmap .lplayer2  {  opacity:0.0; border:thick solid #009A04;} ' +                 ' #magicmap .lplayer3  {  opacity:0.0; border:thick solid #0000FF;} ' +                 ' #magicmap .lplayer4  {  opacity:0.0; border:thick solid #FFFF00;} ' +                 ' #magicmap .lplayer5  {  opacity:0.0; border:thick solid #00FFFF;} ' +                 ' #magicmap .lplayer6  {  opacity:0.0; border:thick solid #FF00FF;} ' +                 ' #magicmap .lplayer7  {  opacity:0.0; border:thick solid #FF9922;} ' +                 ' #magicmap .lplayer8  {  opacity:0.0; border:thick solid #FFFFFF;} ' +                 ' #magicmap .iplayer0  {  opacity:0.8; border:thick dashed #7F7F7F;} ' +                 ' #magicmap .iplayer1  {  opacity:0.8; border:thick dashed #FF0000;} ' +                 ' #magicmap .iplayer2  {  opacity:0.8; border:thick dashed #009A04;} ' +                 ' #magicmap .iplayer3  {  opacity:0.8; border:thick dashed #0000FF;} ' +                 ' #magicmap .iplayer4  {  opacity:0.8; border:thick dashed #FFFF00;} ' +                 ' #magicmap .iplayer5  {  opacity:0.8; border:thick dashed #00FFFF;} ' +                 ' #magicmap .iplayer6  {  opacity:0.8; border:thick dashed #FF00FF;} ' +                ' #magicmap .iplayer7  {  opacity:0.8; border:thick dashed #FF9922;} ' +                ' #magicmap .iplayer8  {  opacity:0.8; border:thick dashed #FFFFFF;} ' +                ' #magicmap .mplayer0  {  opacity:0.0; border:thick solid #7F7F7F;} ' +                 ' #magicmap .mplayer1  {  opacity:0.0; border:thick solid #FF0000;} ' +                 ' #magicmap .mplayer2  {  opacity:0.0; border:thick solid #009A04;} ' +                 ' #magicmap .mplayer3  {  opacity:0.0; border:thick solid #0000FF;} ' +                 ' #magicmap .mplayer4  {  opacity:0.0; border:thick solid #FFFF00;} ' +                 ' #magicmap .mplayer5  {  opacity:0.0; border:thick solid #00FFFF;} ' +                 ' #magicmap .mplayer6  {  opacity:0.0; border:thick solid #FF00FF;} ' +                 ' #magicmap .mplayer7  {  opacity:0.0; border:thick solid #FF9922;} ' +                 ' #magicmap .mplayer8  {  opacity:0.0; border:thick solid #FFFFFF;} ' +                 ' #magicmap .jplayer0  {  opacity:10.8; border:thick dashed  #7F7F7F;} ' +                 ' #magicmap .jplayer1  {  opacity:10.8; border:thick dashed  #FF0000;} ' +                 ' #magicmap .jplayer2  {  opacity:10.8; border:thick dashed  #009A04;} ' +                 ' #magicmap .jplayer3  {  opacity:10.8; border:thick dashed  #0000FF;} ' +                 ' #magicmap .jplayer4  {  opacity:10.8; border:thick dashed  #FFFF00;} ' +                 ' #magicmap .jplayer5  {  opacity:10.8; border:thick dashed  #00FFFF;} ' +                 ' #magicmap .jplayer6  {  opacity:10.8; border:thick dashed  #FF00FF;} ' +                ' #magicmap .jplayer7  {  opacity:10.8; border:thick dashed  #FF9922;} ' +                ' #magicmap .jplayer8  {  opacity:10.8; border:thick dashed  #FFFFFF;} ' +                ' #magicmap .nplayer0  {  opacity:0.0; border:thick solid #7F7F7F;} ' +                 ' #magicmap .nplayer1  {  opacity:0.0; border:thick solid #FF0000;} ' +                 ' #magicmap .nplayer2  {  opacity:0.0; border:thick solid #009A04;} ' +                 ' #magicmap .nplayer3  {  opacity:0.0; border:thick solid #0000FF;} ' +                 ' #magicmap .nplayer4  {  opacity:0.0; border:thick solid #FFFF00;} ' +                 ' #magicmap .nplayer5  {  opacity:0.0; border:thick solid #00FFFF;} ' +                 ' #magicmap .nplayer6  {  opacity:0.0; border:thick solid #FF00FF;} ' +                 ' #magicmap .nplayer7  {  opacity:0.0; border:thick solid #FF9922;} ' +                 ' #magicmap .nplayer8  {  opacity:0.0; border:thick solid #FFFFFF;} ' +                 ' .playerBG0 { background-color: #7F7F7F; } ' +                ' .playerBG1 { background-color: #FF0000; } ' +                ' .playerBG2 { background-color: #009A04; } ' +                ' .playerBG3 { background-color: #0000FF; } ' +                ' .playerBG4 { background-color: #FFFF00; } ' +                ' .playerBG5 { background-color: #00FFFF; } ' +                ' .playerBG6 { background-color: #FF00FF; } ' +                ' .playerBG7 { background-color: #FF9922; } ' +                ' .playerBG8 { background-color: #FFFFFF; } ');//    ---- Get Player Names ----    cc_log("Player IDs");    playersArray["Neutral"] = new Player("Neutral",NID,pl_Colors[NID]);       pIndxs = getElementsByClassName(rightside,"span","player");    for( i in pIndxs )    {        if( pIndxs[i].innerHTML )         {            playersArray[pIndxs[i].innerHTML] = new Player(pIndxs[i],++num_players,pl_Colors[i]);        }    }    if (fog) // create extra player for Unknown territories.    {	for (name in playersArray)	{		UID++;	}	playersArray["Unknown"] = new Player("Unknown",UID,pl_Colors[NID]);    }    // ID THE MAP    mapName = unsafeWindow.mapFile;    mapSize = unsafeWindow.mapResolution;//    ---- Map Analysis ----    cc_log("Map Analysis");    analyseMap();    cc_log("Starting Request XML");    GM_xmlhttpRequest({method: 'GET',url: 'http://www.conquerclub.com/maps/'+mapName+'.xml',headers: {'User-agent': 'Mozilla/4.0 (compatible) Greasemonkey/0.3 BOB' , 'Accept': 'application/xml,text/xml'},onload: 	function(responseDetails) 	{		cc_log("Recived XML response");            		var parser = new DOMParser();		var dom = parser.parseFromString(responseDetails.responseText,"application/xml");		smallwidth = dom.getElementsByTagName('smallwidth')[0].textContent.normiliseSpaces();		smallheight = dom.getElementsByTagName('smallheight')[0].textContent.normiliseSpaces();		largewidth = dom.getElementsByTagName('largewidth')[0].textContent.normiliseSpaces();		largeheight = dom.getElementsByTagName('largeheight')[0].textContent.normiliseSpaces();		cc_log("Parsed XML");		var entries = dom.getElementsByTagName('country');            		if (entries.length<1) 		{			entries = dom.getElementsByTagName('territory');		}		var title;		var amrs;		var borders;		var bb;		for (var i = 0; i < entries.length; i++) 		{			title = entries[i].getElementsByTagName('name')[0].textContent.normiliseSpaces();			pid = parseInt( armiesArr[(i*2)] );			amrs = armiesArr[(i*2)+1];			countriesArray[title] =  new Country (title,pid,amrs);			borders = entries[i].getElementsByTagName('border');                			for (var j = 0; j <borders.length; j++) 			{				bb = borders[j].textContent.normiliseSpaces();                				countriesArray[title]._borders.push(bb);			}			countriesArray[title]._smallxPos = entries[i].getElementsByTagName('smallx')[0].textContent;			countriesArray[title]._smallyPos = entries[i].getElementsByTagName('smally')[0].textContent;			countriesArray[title]._largexPos = entries[i].getElementsByTagName('largex')[0].textContent;			countriesArray[title]._largeyPos = entries[i].getElementsByTagName('largey')[0].textContent;			bombardments = entries[i].getElementsByTagName('bombardment');						for (var j = 0; j <bombardments.length; j++) 			{				bb = bombardments[j].textContent.normiliseSpaces();				countriesArray[title]._bombards.push(bb);			}			var bonusElements = entries[i].getElementsByTagName('bonus');			if (bonusElements.length>0)			{				var bonus = bonusElements[0].textContent;				countriesArray[title]._bonus = parseInt(bonus);			}			var neutral = entries[i].getElementsByTagName('neutral');			if (!neutral.length>0)			{				totalStartCountries++;			}		}//             -- Calculate Defensive Borders -- 		for (var cou in countriesArray) 		{			var cc = countriesArray[cou];			// Now update all those places I can attack with my details			for (var k=0; k < cc._borders.length; k++)			{				var bb = countriesArray[cc._borders[k]];				if (!bb._DefendBorders[cc._name]) 				{					bb._DefendBorders.push(cc._name);				}			}			for (var k=0; k < cc._bombards.length; k++)			{				var bb = countriesArray[cc._bombards[k]];				bb._bombardedBy.push(cc._name);			}		}		cc_log("Done Territories");		entries = dom.getElementsByTagName('continent');		var bonus;		for (var i = 0; i < entries.length; i++) 		{			title = entries[i].getElementsByTagName('name')[0].textContent.normiliseSpaces();			var dedupename = 1;			var titleRoot = title			while (continentsArray[title]) { title = titleRoot + "_" + dedupename++ ; }			bonus = parseInt(entries[i].getElementsByTagName('bonus')[0].textContent);			required = entries[i].getElementsByTagName('required');			if (required.length>0) 			{				required = parseInt(required[0].textContent);				continentsArray[title] =  new PartialContinent(titleRoot,bonus,required,title);			}			else			{	        	        continentsArray[title] =  new Continent(titleRoot,bonus,title);			}        	        var countries = entries[i].getElementsByTagName('component');                	var bb = "";	                for (var j = 0; j <countries.length; j++) 			{				bb = countries[j].textContent.normiliseSpaces();				continentsArray[title]._countrys.push(bb); 			}			var overrides = entries[i].getElementsByTagName('override');	                var bb = "";        	        for (var j = 0; j <overrides.length; j++) 			{				bb = overrides[j].textContent.normiliseSpaces();				continentsArray[title]._overrides.push(bb); 			}            		}		cc_log("Done Continents");		entries = dom.getElementsByTagName('objective');		for (var i = 0; i < entries.length; i++) 		{			title = entries[i].getElementsByTagName('name')[0].textContent.normiliseSpaces();			var dedupename = 1;			var titleRoot = title			while (objectivesArray[title]) { title = titleRoot + "_" + dedupename++ ; }        	        objectivesArray[title] =  new objective(titleRoot,title);        	        var countries = entries[i].getElementsByTagName('component');                	var bb = "";	                for (var j = 0; j <countries.length; j++) 			{				bb = countries[j].textContent.normiliseSpaces();				objectivesArray[title]._countrys.push(bb); 			}		}		cc_log("Done Objectives");    updatePlayerCards();    processLog(0, true);    getCardType();    var siblings; // need to adjust where I place these divs depending on whether or not the Cards span is in existence.    if (m_bonusCards == eBonusCards.NOCARDS || !document.getElementById("cards"))	siblings = logDiv.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling;    else	siblings = logDiv.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling.previousSibling;//    ---- Add redemption value to dashboard and fix wrapping issue ----    cc_log("Adding Additional Lines to dashboard");        var mapInspectDiv = document.createElement('div');    mapInspectDiv.id="mapinspect";    dashboard.parentNode.insertBefore(mapInspectDiv, siblings);    showMapInspectDiv();    redemption = document.createElement('div');    redemption.id="redemption";    dashboard.parentNode.insertBefore(redemption, siblings);	    //Lets user know how many armies they can expect to receive if they turn in cards.    recalcRedemption();    //Auto Scroll to Game    if( OPTIONS['jumptomap'] ){        window.setTimeout(jtm,1000);    }        APPLY_MAPFADE(OPTIONS,mapName);    		// always create this DIV now - we need it for the mapfade number show...		var magicMapDiv = document.createElement('div');		magicMapDiv.id="magicmap";		magicMapDiv.innerHTML = "";		map.parentNode.appendChild(magicMapDiv);		updateCountries();		updateContinents();		updateObjectives();		updateTextmap();		createStats();		APPLY_TEXTMAP(OPTIONS);		APPLY_STATS(OPTIONS);		updateMagicMap();		colourCodeDD();		updateMenuHiderHeight();    cc_log("Done after request");              }}); // END Map Get response Function    cc_log("Done Outside request");function addBody(tlog){ var helpHtml = (<r><![CDATA[ <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>Conquer Club - BOB - Help</title>                <link rel="stylesheet" href="instructions_files/skidoo_too.html" type="text/css">      <link rel="stylesheet" href="instructions_files/skidoo_too_002.html" type="text/css">      <link rel="stylesheet" href="instructions_files/conquerclub.html" type="text/css">      <link rel="stylesheet" href="instructions_files/skidoo_too_print.html" type="text/css" media="print"><style type="text/css"> dt { font-weight: bold; margin-bottom:5px;margin-top:10px;}body { font-size: 80%;}fieldset a.plain { text-decoration:none; float:right;}fieldset legend a.plain {  float:none;}fieldset { margin-bottom:10px;}</style></head><body>      <div id="menu">      </div>      <div id="body">         <form>            <fieldset>               <legend>BOB</legend>                <dl>					<dt>BOB - Battle Observation Briefing - version 3.4.5.</dt>					<dd>		            BOB is a javascript extension, installed via Greasemonkey, which modifies		            and extends the in game functionality at Conquer Club.		            </dd><dd>		            To discuss or request features please see					the <a href="http://www.conquerclub.com/forum/viewtopic.php?t=33445">AJAX BOB thread in the Conquer Club forum</a>.		            Please read this document carefully before posting help requests to the thread.		            </dd><dd>		            If you experienced a slow page load on this occasion please see		            Diagnostics below.		            </dd>               </dl>                           </fieldset>            <fieldset>               <legend>Default Features</legend>                <dl>                  <dt>                     BOB Menu                  </dt>                  <dd>                     Adds the "BOB" menu under the existing Game,                     Interaction and Personal menus on Conquer Club. See                     Menu Options below.                  </dd>                  <dt>                     Card Redemption Value                  </dt>                  <dd>                     Adds card redemption value bar under the map which                     displays card set values for escalating and flat rate                     games. Not displayed for no cards games.                  </dd>                  <dt>                     Modified Territory Dropdowns                  </dt>                  <dd>                     Adds the number of armies on a territory in brackets after                     each territory name in dropdowns. Modifies the background                     colour in the dropdown to match the player colour.                  </dd>                  <dt>                     Terminator Points Summary                  </dt>                  <dd>                     Adds a summary of all eliminations, points lost and points                     gained below the Game Log text in Terminator games.                  </dd>                  <dt>                     Time Remaining Countdown                  </dt>                  <dd>                     Adds count down of time remaining for the current player                     to take their turn. For format options see 'Clock                     Format' under Menu Options below.                  </dd>               </dl>                           </fieldset>            <fieldset>               <legend><a class="plain" name="opti">Menu Options</a></legend>                <div>Note that the first three options are effective per map. All other options are global.<br><br></div>               <dl>                  <dt>                     Map Opacity : 10%|...|100%                  </dt>                  <dd>                     Lightens the map to the percentage shown.<br><br>                  </dd>                  <dt>                     Map Centering Left : -21|...|22                  </dt>                  <dd>                     Offsets the overlaid display of army indicators on the map by the specified number of pixels: Negative towards the left, positive towards the right, of the default position. Allows players to ensure that army indicators overlaid by BOB on the Conquer Club map are exactly aligned.<br><br>                  </dd>                  <dt>                     Map Centering Top : -21|...|22                  </dt>                  <dd>                     Offsets the overlaid display of army indicators on the map by the specified number of pixels: Negative towards the top, positive towards the bottom, of the default position. Allows players to ensure that army indicators overlaid by BOB on the Conquer Club map are exactly aligned.<br><br>                  </dd>                  <dt>                     Text Map : Standard|Extended|Off                  </dt>                  <dd>                     Adds a text map report. The Standard report shows                     continent and territory possession. The Extended report                     shows all Standard information plus detail on territory                     neighbours. The report appears above the Game Log and Game                     Chat.<br><br>                  </dd>                  <dt>                     Jump to Map : On|Off                  </dt>                  <dd>                     Re-positions the page so that the map appears at the top of                     the Firefox window every time the page loads.<br><br>                  </dd>                  <dt>                     Stats : Standard|Extended|Off                  </dt>                  <dd>                     Adds a statistics table under the map.<br><br>                  </dd>                  <dd>                     The Standard table includes the following for each player;                     number of cards, number of missed turns, number of armies,                     number of territories, armies received last, armies due, deferred armies					 due and continents held summary.<br><br>                  </dd>                  <dd>                     The Extended report shows all Standard information and                     adds the following for each player; number of armies as a                     percentage of all the armies on the map, number of                     territories as a percentage of all territories on                     the map, a player strength indicator, the calculation of                     armies due in detail showing the value of each of the                     three elements (T, C &amp; TB) described below and a card                     set estimate.<br><br>                  </dd>                  <dd>                     The Extended report also follows the number of territories is followed by a                      hyphen; '-' or one to three asterisks; '*'. The number of                     asterisks indicates the number of territories the player                     must lose to reduce the armies due by one. A hyphen                     indicates that the number of armies due cannot be reduced                     further by simply losing territories. The armies due total                     takes into account bonuses for territories (T), continents                     held (C) and single territory bonuses (TB). The                     continents held summary includes the value of the bonus in                     brackets.<br><br>                  </dd>                  <dd>                     For further information on strength indicator see Tr0y                     under Credits below.                  </dd>                  <dd>                     For further information on card set estimate see                     tahitiwahini under Credits below.<br><br>                  </dd>                  <dt>                     Confirm Auto-Attack : On|Off                  </dt>                  <dd>                     Adds a confirmation dialog before actioning an Auto-Attack                     order.<br><br>                  </dd>                  <dt>                     Confirm Deploy : On|Off                  </dt>                  <dd>                     Adds a confirmation dialog before actioning a Deploy                     order.<br><br>                  </dd>                  <dt>                     Confirm Phase End : On|Off                  </dt>                  <dd>                     Adds a confirmation dialog before actioning an End Attacks                     or End Fortifications order. Also, in Chained or Adjacent                     fortification games, adds a confirmation dialog before                     actioning a Fortify order since this effectively includes                     an End Fortifications order.<br><br>                  </dd>                  <dt>                     Map Inspect : On|Off                  </dt>                  <dd>                     Adds a Map Inspect status bar (MI bar) under the map which                     displays information dependant upon where the mouse is                     hovered.                  </dd>                  <dd>                  <ul>	                  <li>    	                 Hover over a territory on the map to display a report on        	             that territory and its neighbours in the MI bar. The            	         neighbours are also highlighted on the map.                	  </li>	                  <li>	                     Hover over a territory card name to display a report on	                     that territory and its neighbours in the MI bar. The	                     territory is also highlighted on the map.	                  </li>	                  <li>	                     Hover over a player or team name to highlight all	                     territories held by that player or team.	                  </li>                  </ul>                  </dd>                  <dd>                     Click on a continent name in the Text Map or Stats table                     to jump to the map and flash highlight all the territories                     in the continent.<br><br>                  </dd>                  <dd>                     There are two styles of highlight: Complete square highlights                     on territories where one or more neighbours are occupied by a player                     other than the player occupying the highlighted territory.                     Square bracket highlights on territories whose neighbours are                     all occupied by the player occupying the highlighted territory.<br><br>                  </dd>                  <dt>                     Clock Format : 24h|am/pm|Off                  </dt>                  <dd>                     Appends text in the form 'today/tomorrow @ &lt;turn                     time&gt;' to the end of the countdown timer. The                     &lt;turn time&gt; value may be displayed in 24 hour format                     or 12 hour format with 'am' or 'pm'                     indicators.<br><br>                  </dd>                  <dt>                     Float Actions : On|Off                  </dt>                  <dd>                     Allows the Action bar to be detached from the main page and floated at the 					 bottom of the Firefox window.<br><br>                  </dd>                  <dt>                     Hide Menu : On|Off                  </dt>                  <dd>                     Allows the left hand column containing the Game, Interaction, Personal and					 BOB Menus to auto hide when the mouse pointer is elsewhere in the Firefox					 window. The Menus can be viewed by moving the mouse pointer to the left					 edge of the window.<br><br>                  </dd>                  <dt>                     Help/Info                  </dt>                  <dd>                     Opens this document in a pop up window.<br><br>                  </dd>                  <dt>                     Check for Upgrades                  </dt>                  <dd>                     Opens a userscripts.org page in a pop up window, from where the latest					 version of BOB can be installed.<br><br>                  </dd>               </dl>                           </fieldset>            <fieldset>               <legend>History<br>3 : <b>yeti_c's AJAX compatible 'BOB' script</b></legend>                <dl>                  <dt>                     yeti_c                  </dt>                  <dd>                     Lead author of this AJAX compatible 'BOB' Greasemonkey script evolved from					 stocksr's original 'BOB' script.<br><br>                  </dd>                  <dt>                     credits                  </dt>                  <dd>                     <b>stocksr & other contributors</b> - the original 'BOB' Greasemonkey script.					 See below.<br>					 <b>Mfontolan</b> - clock code.<br>                     <b>Yowzer94</b> - clock code.<br>					 <b>Klupar</b> - Fog of War suggestions.<br>					 <b>DiM</b> - AJAX testing.<br>					 <b>Oaktown</b> - colourblind testing.<br>					 <b>Lackattack</b> - answering questions and helping with code.<br>                     <b>cicero</b> - author of this Help/Info document.<br>                  </dd>               </dl>            </fieldset>            <fieldset>               <legend>History<br>2 : <b>stocksr's BOB script</b></legend>                <dl>                  <dt>                     stocksr                  </dt>                  <dd>                     Lead author of 'BOB' Greasemonkey script evolved from TrOy's original 'Conquer Club'					 Greasemonkey script and from which, in turn, this script is evolved.<br>					 'BOB' included ... [to be completed]<br><br>                  </dd>                  <dt>                     credits                  </dt>                  <dd>                     <b>TrOy</b> - the original 'Conquer Club' Greasemonkey script.					 See below.<br>					 <b>tahitiwahini</b> - author of the original card set estimate code. See                     tahitiwahini's post in the BOB thread dated 28 April                     2007 for detail of the calculation.<br>                     <b>Ishiro</b> - author of the original Confirm Phase Ends and Confirm                     Auto-Attack code. See thread at <a href="http://www.conquerclub.com/forum/viewtopic.php?t=7051">http://www.conquerclub.com/forum/viewtopic.php?t=7051</a>.<br>					 <b>ClessAlvein</b> - contributor to the Clock Format code.<br>					 <b>weirdbro</b> - contributor to the optimised Time Remaining Countdown                     code.<br>					 <b>yeti_c</b> - contributor of BOB - Battle Observation Briefing -                     acronym.<br>                     <b>cicero</b> - author of the Help/Info document.<br>                  </dd>               </dl>            </fieldset>            <fieldset>               <legend>History<br>1 : <b>TrOy's original script</b></legend>                <dl>                  <dt>                     Tr0y                  </dt>                  <dd>                     Lead author of the original 'Conquer Club' Greasemonkey                     script from which stocksr's 'BOB' script evolved.<br>					 The original script included Time Remaining Countdown, 					 Card Redemption Value, Colourblind letter prefixes, basic 					 Stats table including number of cards, number of armies, 					 number of territories held, strength indicator and armies					 due (without continent bonuses). See thread at <a href="http://www.conquerclub.com/forum/viewtopic.php?t=6672">http://www.conquerclub.com/forum/viewtopic.php?t=6672</a>.<br>                  </dd>               </dl>            </fieldset>            <fieldset>               <legend>Diagnostics</legend>                <div>                  Please copy this section into a private message to <a href="http://www.conquerclub.com/forum/privmsg.php?mode=post&amp;u=66944" target="_new">yeti_c</a> IF you experienced a SLOW page                  load on this occasion.               </div>               <dl>                  <dt>                     Timing Log (Seconds)                  </dt>                  <dd>                    %%TIMEINGS%%                  </dd>                  <dt>                     Settings                  </dt>                  <dd>                    %%SETTINGS%%                  </dd>               </dl>            </fieldset>         </form>      </div>   </body></html>    ]]></r>).toString();      return  helpHtml.replace("%%SETTINGS%%",uneval(OPTIONS)).replace("%%TIMEINGS%%",tlog).replace("%%VERSION%%",versionString);   }// end of addBody.		cc_log("Building the Settings Menu");          		function toggleFloatingActionForm()		{			// Code below stolen from edthemaster			var actionForm = document.getElementById('action-form')			if (OPTIONS["floatActions"] == "Off")			{				OPTIONS["floatActions"] = "On";				if (actionForm)				{					actionForm.style.position='fixed'					actionForm.style.bottom=0					actionForm.style.zIndex=1 				}				var outerRolls = document.getElementById('outer-rolls');				if (outerRolls)				{					outerRolls.style.position='fixed';					outerRolls.style.backgroundColor="#FFFFFF";					outerRolls.style.top=0;					outerRolls.style.zIndex=1;				}			}			else			{				OPTIONS["floatActions"] = "Off";				if (actionForm)				{					actionForm.style.position='relative'					actionForm.style.bottom=0					actionForm.style.zIndex=1 				}				var outerRolls = document.getElementById('outer-rolls');				if (outerRolls)				{					outerRolls.style.position='relative';					outerRolls.style.backgroundColor="#FFFFFF";					outerRolls.style.top=0;					outerRolls.style.zIndex=1;				}			}			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Float Actions: <b>" + OPTIONS["floatActions"] + '</b>';		}		function toggleHideMenu()		{			if (OPTIONS["hideMenu"] == "Off")			{				OPTIONS["hideMenu"] = "On";				hideMenu();			}			else			{				OPTIONS["hideMenu"] = "Off";				showMenu();			}			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Hide Menu: <b>" + OPTIONS["hideMenu"] + '</b>';		}		function toggleTextMap() 		{			if (OPTIONS["textMapType"] == "Off") 			{				OPTIONS["textMapType"] = "Standard";			} 			else if (OPTIONS["textMapType"] == "Standard") 			{				OPTIONS["textMapType"] = "Extended";			} 			else 			{				OPTIONS["textMapType"] = "Off";			}			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Text Map: <b>" + (OPTIONS["textMapType"]) + '</b>';        			APPLY_TEXTMAP(OPTIONS);			updateMagicMap();		}		function toggleJumpToMap() 		{			OPTIONS["jumptomap"] = ! OPTIONS["jumptomap"];			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Jump to Map: <b>" + (OPTIONS["jumptomap"] ? " On" : " Off")+ '</b>';			if (!OPTIONS["jumptomap"] )				window.location.hash="top";			else 				window.location.hash="map";		}		function toggleStatsMode() 		{			if (OPTIONS["statsMode"] == "Off") 			{				OPTIONS["statsMode"] = "Standard";        		} 			else if (OPTIONS["statsMode"] == "Standard") 			{				OPTIONS["statsMode"] = "Extended";			} 			else 			{				OPTIONS["statsMode"] = "Off";			}        			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Stats: <b> " + OPTIONS["statsMode"] + '</b>';			APPLY_STATS(OPTIONS);			updateMagicMap();		}		function toggle24HourClock() 		{			if (OPTIONS["24hourClockFormat"] == "Off") 			{				OPTIONS["24hourClockFormat"] = "am/pm";			} 			else if (OPTIONS["24hourClockFormat"] == "am/pm") 			{				OPTIONS["24hourClockFormat"] = "24h";			} 			else 			{				OPTIONS["24hourClockFormat"] = "Off";			}        			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Clock Format: <b> " + OPTIONS["24hourClockFormat"] + '</b>';		}		function toggleMagicMap() 		{			OPTIONS["mapInspect"] = ! OPTIONS["mapInspect"];			serialize("OPTIONS",  OPTIONS);			this.innerHTML = "Map Inspect: <b>" + (OPTIONS["mapInspect"] ? " On" : " Off")+ '</b>';			showMapInspectDiv();			updateMagicMap();		}    function toggleConfirmActionsAA() {        OPTIONS["confirmAutoAttack"] = ! OPTIONS["confirmAutoAttack"];        serialize("OPTIONS",  OPTIONS);        this.innerHTML = "Confirm AutoAttack: <b>" + (OPTIONS["confirmAutoAttack"] ? " On" : " Off")+ '</b>';    }     function toggleConfirmActionsDeploy() {        OPTIONS["confirmDeploy"] = ! OPTIONS["confirmDeploy"];        serialize("OPTIONS",  OPTIONS);        this.innerHTML = "Confirm Deploy: <b>" + (OPTIONS["confirmDeploy"] ? " On" : " Off")+ '</b>';    }        function toggleConfirmEnds() {        OPTIONS["confirmEnds"] = ! OPTIONS["confirmEnds"];        serialize("OPTIONS",  OPTIONS);        this.innerHTML = "Confirm Phase End: <b>" + (OPTIONS["confirmEnds"] ? " On" : " Off")+ '</b>';    }        function showHelp(tlog)     {           var win = window.open("","bobHelp","height=600, width=600, toolbar=no, scrollbars=yes, menubar=no");        win.document.write(addBody(tlog));        win.document.close();        win.focus();    }    function showUpgrade()     {           var win = window.open("http://userscripts.org/scripts/show/13076","bobUpgrade","height=600, width=800, toolbar=yes, scrollbars=yes, menubar=yes, resizable=yes");        win.focus();    }            function toggleFadeMap()     {        var cur = GET_MAPFADE(OPTIONS,mapName);        cur = Math.round((cur*10) - 1);        if (cur >= 11) { cur = 1;}        if (cur <= 0) { cur = 10;}        OPTIONS["fadeMap:" + mapName] = cur/10;        if (OPTIONS["fadeMap:" + mapName] == OPTIONS["fadeMap"])        {            delete OPTIONS["fadeMap:" + mapName];                }        serialize("OPTIONS",  OPTIONS);        this.innerHTML = "Map Opacity:  (<b>" + Math.round(cur*10) + '%</b>)';        APPLY_MAPFADE(OPTIONS,mapName);    }    function toggleMapLeft()     {        var cur = GET_MAPLEFT(OPTIONS,mapName);	cur--;        if (cur >= 22) { cur = -22;}        if (cur <= -22) { cur = 22;}        OPTIONS["MapLeft:" + mapName] = cur;        if (OPTIONS["MapLeft:" + mapName] == OPTIONS["MapLeft"])        {            delete OPTIONS["MapLeft:" + mapName];                }        serialize("OPTIONS",  OPTIONS);        this.innerHTML = "Map Centering Left: <br> (<b>"+cur+' pixels</b>)';        SHIFT_MAGICMAP(OPTIONS,mapName);    }    function toggleMapTop()     {        var cur = GET_MAPTOP(OPTIONS,mapName);	cur--;        if (cur >= 22) { cur = -22;}        if (cur <= -22) { cur = 22;}        OPTIONS["MapTop:" + mapName] = cur;        if (OPTIONS["MapTop:" + mapName] == OPTIONS["MapTop"])        {            delete OPTIONS["MapTop:" + mapName];                }        serialize("OPTIONS",  OPTIONS);        this.innerHTML = "Map Centering Top: <br> (<b>"+cur+' pixels</b>)';        SHIFT_MAGICMAP(OPTIONS,mapName);    }        cc_log("Building the Settings Menu 2");              var leftBar = document.getElementById("leftColumn");        var ul = leftBar.getElementsByTagName("ul");    var gmMenu = document.createElement('div');    gmMenu.id="bobmenu";    ul[0].parentNode.appendChild(gmMenu);//    stats.style.margin = '10px 0 0 0';//    var gmMenu= ul[0].parentNode;        var t = document.createElement('h3');    t.id = "bobmenu";    t.innerHTML =  "BOB Menu <span style='font-size:7pt;' ><a href='http://www.conquerclub.com/forum/viewtopic.php?t=33445'>v: " + versionString + "</a></span>";     gmMenu.appendChild(t);            var ul = document.createElement ('ul');    gmMenu.appendChild(ul);    var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    this.innerHTML = option1a.innerHTML = "Map Opacity:  (<b>" + Math.round(GET_MAPFADE(OPTIONS,mapName)*100) + '%</b>)';    option1a.addEventListener("click", toggleFadeMap, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    this.innerHTML = option1a.innerHTML = "Map Centering Left: <br> (<b>" + Math.round(GET_MAPLEFT(OPTIONS,mapName)) + ' pixels</b>)';    option1a.addEventListener("click", toggleMapLeft, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    this.innerHTML = option1a.innerHTML = "Map Centering Top: <br> (<b>" + Math.round(GET_MAPTOP(OPTIONS,mapName)) + ' pixels</b>)';    option1a.addEventListener("click", toggleMapTop, false);    var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Text Map: <b>" + (OPTIONS["textMapType"] )+ '</b>';    option1a.addEventListener("click", toggleTextMap, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Jump to Map: <b>" + (OPTIONS["jumptomap"] ? " On" : " Off")+ '</b>';    option1a.addEventListener("click", toggleJumpToMap, false);    var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Stats: <b>" + OPTIONS["statsMode"] + '</b>';    option1a.addEventListener("click", toggleStatsMode, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Confirm Phase End: <b>" + (OPTIONS["confirmEnds"] ? " On" : " Off")+ '</b>';    option1a.addEventListener("click", toggleConfirmEnds, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Confirm AutoAttack: <b>" + (OPTIONS["confirmAutoAttack"] ? " On" : " Off")+ '</b>';    option1a.addEventListener("click", toggleConfirmActionsAA, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Confirm Deploy: <b>" + (OPTIONS["confirmDeploy"] ? " On" : " Off")+ '</b>';    option1a.addEventListener("click", toggleConfirmActionsDeploy, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Map Inspect: <b>" + (OPTIONS["mapInspect"] ? " On" : " Off")+ '</b>';    option1a.addEventListener("click", toggleMagicMap, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Clock Format: <b>" + OPTIONS["24hourClockFormat"] + '</b>';    option1a.addEventListener("click", toggle24HourClock, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');    option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Float Actions: <b>" + OPTIONS["floatActions"] + '</b>';    option1a.addEventListener("click", toggleFloatingActionForm, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');        option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Hide Menu: <b>" + OPTIONS["hideMenu"] + '</b>';    option1a.addEventListener("click", toggleHideMenu, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');        option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Help/Info";    option1a.addEventListener("click", function() {showHelp(Logging)}, false);var option1 = document.createElement ('li');    ul.appendChild(option1);    var option1a = document.createElement ('a');        option1.appendChild(option1a);    option1a.href="javascript:void(0);";    option1a.innerHTML = "Check for Upgrades";    option1a.addEventListener("click", function() {showUpgrade()}, false);     cc_log("Checking for previous versions");        var hrs = document.getElementById('hrs'); // Tr0y's & roberts mods    var bhrs = document.getElementById('bhrs'); // BOB    if (hrs ) {        alert("You are currently running more than one Conquer Club Greasemonkey script. This causes unpredictable results/errors. It is recommended that you disable the 'Conquer Club' and/or 'Conquer Club - Roberts Mods' scripts leaving only this script 'Conquer Club - BOB' enabled.\n\n To do this right click on the Greasemonkey icon and untick the redundant scripts, then press F5 to refresh the page." );    }    	/* Ishiro's Confirm Commands code */	var newsendRequest = unsafeWindow.sendRequest;	unsafeWindow.sendRequest = function(command) {    /* ---    Confirmation Popups --- */      if (((command == 'End Attacks' || command == 'End Fortification' || (command == 'Fortify' && !(dashboard.innerHTML.indexOf("Unlimited") > -1))) && myOptions['confirmEnds']) || (command == 'Auto-Attack' && myOptions['confirmAutoAttack']) || (command == 'Deploy' && myOptions['confirmDeploy']))      {         if (confirm("Are you sure?"))         {            return newsendRequest(command);         }         else {            return false;         }      }      else {         return newsendRequest(command);      }   }   updateMenuHiderHeight();} // End GAME Processingfunction deserialize(name, def) {  return eval(GM_getValue(name, (def || '({})')));}function serialize(name, val) {  GM_setValue(name, uneval(val));}function upgrade(o,name) {    // Copies a default option if there is a missing option.    if (typeof(o[name]) == "undefined") {        o[name] = DEFAULT_OPTIONS[name];    }     }// Load Options var myOptions = (deserialize("OPTIONS", DEFAULT_OPTIONS))if (typeof(myOptions) == "undefined") {    // poor editing in the about:config page    myOptions = new Object();}// LIST ALL OPTIONS HERE // This part will handle options MISSING from the config sectionupgrade(myOptions,'jumptomap');upgrade(myOptions,'fadeMap');upgrade(myOptions,'mapInspect');upgrade(myOptions,'confirmEnds');upgrade(myOptions,'statsMode');upgrade(myOptions,'floatActions');upgrade(myOptions,'hideMenu');// REPLACED OPTIONS.if (typeof(myOptions["showEstimatedArmies"]) != "undefined") {    delete myOptions["showEstimatedArmies"];}if (typeof(myOptions["focuscolor"]) != "undefined") {    delete myOptions["focuscolor"];}if (typeof(myOptions["hoverHighlight"]) != "undefined") {    myOptions["mapInspect"] = myOptions["hoverHighlight"];    delete myOptions["hoverHighlight"];}// TEXT MAP TYPE    if (typeof(myOptions["textMapType"]) == "undefined") {        // textMapType = new option        if (typeof(myOptions["textMap"]) != "undefined") {            // we have an option to upgrade.            if (myOptions["textMap"]) {                myOptions["textMapType"] = "Extended";                alert ("This version of the script changes the text map option - there are now two varaitons large and small, you have been upgraded to the large setting which is the same as the previous version");            }            else             {                myOptions["textMapType"] = "Off";            }            delete myOptions["textMap"];        }        else        {            upgrade(myOptions,'textMapType');        }    }// CLOCK FORMAT if (typeof(myOptions["24hourClockFormat"]) == "undefined") {  // 24hourClockFormat = new option        if (typeof(myOptions["24hourClock"]) != "undefined") {            // we have an option to upgrade.            if (myOptions["24hourClock"]) {                myOptions["24hourClockFormat"] = "24h";             }            else             {                myOptions["24hourClockFormat"] = "am/pm";            }            delete myOptions["24hourClock"];        }        else        {            upgrade(myOptions,'24hourClockFormat');                   }}else {    if (myOptions["24hourClockFormat"] == "AM/PM") {        myOptions["24hourClockFormat"] = "am/pm";    }}// Confirm Actionsif (typeof(myOptions["confirmAutoAttack"]) == "undefined") {  if (typeof(myOptions["confirmActions"]) == "undefined") {    upgrade(myOptions,'confirmAutoAttack');  }  else  {    myOptions["confirmAutoAttack"] = myOptions["confirmActions"];  }}if (typeof(myOptions["confirmDeploy"]) == "undefined") {  if (typeof(myOptions["confirmActions"]) == "undefined") {    upgrade(myOptions,'confirmDeploy');  }  else  {    myOptions["confirmDeploy"] = myOptions["confirmActions"];  }} if (typeof(myOptions["confirmActions"]) != "undefined") {     delete myOptions["confirmActions"];}serialize("OPTIONS", myOptions);function processLog(start, init){    log = logDiv.innerHTML.split('<br>');//Get logs    var TerminatorSummary = "";    if (!init)    {	num_turnins = stored_num_turnins;	for (name in playersArray)	{		playersArray[name]._skipped = stored_skipped[playersArray[name]._pid];		playersArray[name]._lastBonus = stored_last_bonus[playersArray[name]._pid];	}	if (fog)	{		var startingTerrs = Math.floor(totalStartCountries / num_players);		for (name in playersArray)		{			playersArray[name]._calculatedCountries = stored_countries[playersArray[name]._pid];		}	}	TerminatorSummary = stored_terminator_summary;    }    else    {	if (m_gameType == eGameType.TERMINATOR) 	{        	TerminatorSummary += "<h3>Terminator Points Summary</h3>"	}	if (fog)	{		var startingTerrs = Math.floor(totalStartCountries / num_players);		for (name in playersArray)		{			if (name!="Neutral")				playersArray[name]._calculatedCountries = startingTerrs;		}	}    }    /*---- Process Log ----*/    cc_log("Starting Log Processing");    cc_log("Log Processing Info - Length :" + log.length);    for( i = start; i < log.length; i++ ){        // cc_log("Log Processing Info - indx :" + i + ":" + log[i]);        // ID the player        name = log[i].split(/<[^>]*>/)[1];        if (! playersArray[name] && log[i].has('<span class="player')) {                // Player Rename mid game?                var num = parseInt(log[i].split(/"/)[1].split(/player/)[1]);                name = pIndxs[num-1].innerHTML;            }        // Process the log        if( log[i].has(" gets a card") ){            playersArray[name]._skipped = 0;        }        else if(  log[i].has(" ran out of time") ){            playersArray[name]._skipped = 0;        }        else if(  log[i].has(" fortified ") ||log[i].has(" deployed ")  ){            playersArray[name]._skipped = 0;        }        else if(log[i].has("attacked"))	{            playersArray[name]._skipped = 0;	    if (fog)	    {		//add 1 to player who conquered...		playersArray[name]._calculatedCountries++;		// then minus 1 from player who lost...		conquered = log[i].substring(log[i].indexOf("conquered"));        	lossname = conquered.split(/<[^>]*>/)[1];		if (!playersArray[lossname] && conquered.has('<span class="player')) 		{                	// Player Rename mid game?                	var num = parseInt(conquered.split(/"/)[1].split(/player/)[1]);			if (num!=0)                		lossname = pIndxs[num-1].innerHTML;            	}		if (lossname!="neutral player") // don't minus from neutral player...		{			playersArray[lossname]._calculatedCountries--;		}	    }	}//bombarded Imperial Dynasty 6 from Imperial Dynasty Castle and annihilated tinyrock's armies        else if(log[i].has("bombarded"))	{            playersArray[name]._skipped = 0;	    if (fog)	    {		// then minus 1 from player who lost...		annihilated = log[i].substring(log[i].indexOf("annihilated"));        	lossname = annihilated.split(/<[^>]*>/)[1];		if (!playersArray[lossname] && annihilated.has('<span class="player')) 		{                	// Player Rename mid game?                	var num = parseInt(annihilated.split(/"/)[1].split(/player/)[1]);			if (num!=0)                		lossname = pIndxs[num-1].innerHTML;            	}		if (lossname!="neutral player") // don't minus from neutral player...		{			playersArray[lossname]._calculatedCountries--;		}	    }	}                else if( log[i].has(" missed a turn") ){            playersArray[ name ]._skipped += 1;        }        else if( log[i].has(" cashed") ){            playersArray[ name ]._skipped = 0;            num_turnins++;        }        else if( log[i].has(" eliminated ") ){            playersArray[ name ]._skipped = 0;            if (m_gameType == eGameType.TERMINATOR) {                TerminatorSummary += log[i] + "<br/>"            }        }        else if( log[i].has(" receives ") )	{		playersArray[name]._skipped = 0; // Copied from above as receives was previously checked for and did this.		//calculate how many armies received... add to last bonus.		if (playersArray[name]._lastBonusFixed)		{			playersArray[name]._lastBonus = 0;			playersArray[name]._lastBonusFixed = false;		}		armies = log[i].substring(log[i].indexOf("receives")+8,log[i].indexOf("armies")-1);		armies = parseInt(armies,10);		if (log[i].has("deferred"))			playersArray[name]._deferred = armies;		else			playersArray[name]._lastBonus = playersArray[name]._lastBonus + armies;	}        else if( log[i].has(" loses ") ){            if (m_gameType == eGameType.TERMINATOR) {                TerminatorSummary += log[i] + "<br/>"            }        }        else if( log[i].has(" gains ") ){            playersArray[ name ]._skipped = 0;            if (m_gameType == eGameType.TERMINATOR) {                TerminatorSummary += log[i] + "<br/>"            }        }        else if( log[i].has(" was kicked out ") || log[i].has(" was a deadbeat") ){            playersArray[ name ]._skipped = -1;            if (m_gameType != eGameType.TERMINATOR) 	    { // if player kicked out and not terminator then blat this to 0.		playersArray[ name ]._calculatedCountries = 0;	    }	}        else if( log[i].has("Incrementing game to round") || log[i].has("Game has been initialized") )	{		// update starter place - and stored vars.		logFixed=i;		stored_num_turnins = num_turnins;		stored_skipped = new Array();		stored_last_bonus = new Array();		for (name in playersArray)		{			stored_skipped.push(playersArray[name]._skipped);			stored_last_bonus.push(playersArray[name]._lastBonus);			playersArray[name]._lastBonusFixed = true;			playersArray[name]._deferred = 0;		}		if (fog)		{			stored_countries = new Array();			for (name in playersArray)			{				stored_countries.push(playersArray[name]._calculatedCountries);			}		}		stored_terminator_summary = TerminatorSummary;        }    }    if (m_gameType == eGameType.TERMINATOR)     {	var termDiv = document.getElementById('summary');	if (termDiv)	{		termDiv.innerHTML = TerminatorSummary;	}	else	{		termDiv = document.createElement('div');		termDiv.id="summary";		dashboard.parentNode.insertBefore(termDiv, document.getElementById('chat').previousSibling.previousSibling);		termDiv.style.margin = '10px 0 0 0';		termDiv.innerHTML = TerminatorSummary;	}    }}function createStats(){    statsStr = "";    statsStr2 = "";    tmp = "";    var tmp2 = "";    unk = "";    var unk2 = "";    var plyrCnt = 0;statsStr = "<table align=center style='width:100%;border:1px solid #FFF;background:#eee;' rules=rows><tr style='font-weight:normal;' ><td nowrap><b>P</b>layer&nbsp;</td>" + ( m_bonusCards?"<td nowrap><b>C</b>ards&nbsp;</td>":"" )+"<td nowrap><b>M</b>issed<br><b>T</b>urns&nbsp;</td><td nowrap><b>A</b>rmies&nbsp;</td><td nowrap><b>T</b>erritories&nbsp;";if (fog){statsStr +="[Calc]";}statsStr+= "</td><td nowrap><b>S</b>trength&nbsp;</td><td nowrap><b>L</b>ast<br><b>B</b>onus&nbsp;</td><td nowrap><b>A</b>rmies due<br>(<b>T</b> + <b>C</b> + <b>TB</b>)&nbsp;</td><td nowrap><b>D</b>eferred<br><b>A</b>rmies&nbsp;</td>" + ( m_bonusCards  ?"<td nowrap><b>C</b>ard Set<br><b>E</b>stimate&nbsp;</td>":"" )+"<td nowrap><b>C</b>ontinents&nbsp;</td></tr>";statsStr2 = "<table align=center style='width:100%;border:1px solid #FFF;background:#eee;' rules=rows><tr style='font-weight:normal;' ><td nowrap><b>P</b>layer&nbsp;</td>" + ( m_bonusCards?"<td nowrap><b>C</b>ards&nbsp;</td>":"" )+"<td nowrap><b>M</b>issed<br><b>T</b>urns&nbsp;</td><td nowrap><b>A</b>rmies&nbsp;</td><td nowrap><b>T</b>erritories&nbsp;";if (fog){statsStr2 +="[Calc]";}statsStr2 += "</td><td nowrap><b>L</b>ast<br><b>B</b>onus&nbsp;</td><td nowrap><b>A</b>rmies<br><b>D</b>ue&nbsp;</td><td nowrap><b>D</b>eferred<br><b>A</b>rmies&nbsp;</td><td nowrap><b>C</b>ontinents&nbsp;</td></tr>";var LastTeamID = -1;var teamArmies = 0;var teamTerritories  = 0;var teamCalcedTerrs = 0;var teamStrength =0;    for( name in playersArray )    {        if( playersArray[name]._countries != 0 || playersArray[name]._calculatedCountries != 0)        {                        var teamID = teamNumber(playersArray[name]._pid);                        if (isTeamGame() && LastTeamID != -1 && LastTeamID != teamID )             {                                        var pctArmies = Math.round(teamArmies*100/totalArmies);                var pctCountries = Math.round(teamTerritories*100/totalCountries);                            var curpid = 0;                var nameStr = "Team " + LastTeamID;                var isEliminated = false;                if (LastTeamID != 0 ) {                statsStr+= "<tr>" +                             makeTableCellText(isEliminated, curpid, nameStr) +                             ( m_bonusCards?  makeTableCellText(isEliminated, curpid, "") :"" ) +                            makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid,  teamArmies +" ( " + pctArmies +"% )"); 			if (fog)				statsStr += makeTableCellText(isEliminated, curpid, teamTerritories + " ( " + pctCountries +"% ) ("+teamCalcedTerrs+")" );			else				statsStr += makeTableCellText(isEliminated, curpid, teamTerritories + " ( " + pctCountries +"% )" );                statsStr += makeTableCellText(isEliminated, curpid, teamStrength) +                             makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid, "") +                             "</tr>\n";                statsStr2+=                                                "<tr>" +                            makeTableCellText(isEliminated, curpid, nameStr) +                             ( m_bonusCards?  makeTableCellText(isEliminated, curpid, "") :"" ) +                            makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid,  teamArmies );			if (fog)                            statsStr2+= makeTableCellText(isEliminated, curpid, teamTerritories+" ("+teamCalcedTerrs+")" );			else                            statsStr2+= makeTableCellText(isEliminated, curpid, teamTerritories);                 statsStr2+= makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid, "") +                             "</tr>\n";                }                teamArmies = 0;                teamTerritories  = 0;                teamStrength =0;            }            var curpid = playersArray[name]._pid;            var nameStr = name;                        var cardStr = m_bonusCards ?  '<img width="18" height="16" title="' + playersArray[name]._cards +                                           ' Bonus Cards" alt="' + playersArray[name]._cards + ' Bonus Cards" class="icon3" src="static/cards.gif"/>' + playersArray[name]._cards + ' '                                       :  '';                                                   var pctArmies = (totalArmies!=0)?Math.round(playersArray[name]._armies*100/totalArmies):0;            var pctCountries = Math.round(playersArray[name]._countries*100/totalCountries);            var pctCalcCountries = Math.round(playersArray[name]._calculatedCountries*100/totalCountries);            var numArmiesNextTurn = ( playersArray[name]._pid )?calcArmiesNextTurn(playersArray[name]._countries):0;	    if (fog)		numArmiesNextTurn = ( playersArray[name]._pid )?calcArmiesNextTurn(playersArray[name]._calculatedCountries):0;            var eliminated1 = (playersArray[name]._skipped == -1) ? "<span class=eliminated>" : "" ;            var eliminated2 = (playersArray[name]._skipped == -1) ? "</span>" : "";            var isEliminated = (playersArray[name]._skipped == -1);            // strength = Armies + PotentialArmies - 2*Countries/3            var pl_Strength = Math.round( ( playersArray[name]._armies + (((numArmiesNextTurn + playersArray[name]._continentBonus + playersArray[name]._territoryBonus)*(playersArray[name]._skipped+1))) + (getTurnInP(playersArray[name]._cards) * RedemptionValue) - (2*playersArray[name]._countries/3) ) * 100 )/100;            var currentArmies = playersArray[name]._armies;            var cards = playersArray[name]._cards;            var countries = playersArray[name]._countries;	    var calced_countries = playersArray[name]._calculatedCountries;            var continentBonus = playersArray[name]._continentBonus + playersArray[name]._territoryBonus;            var missedTurns = playersArray[name]._skipped;	    if (curpid!=UID)	    {            	teamArmies += currentArmies;            	teamTerritories  += countries;		teamCalcedTerrs += calced_countries;            	teamStrength += pl_Strength;	    }                        var estimatedArmiesFromCards =                     Math.round(getEstimatedArmiesFromCards(cards,                                                            countries,                                                            totalCountries)                     * 100) / 100;            var expectedArmies =                     Math.round(getTotalExpectedArmies(countries,                                                       continentBonus,                                                       missedTurns,                                                       cards,                                                       totalCountries)                     * 100) / 100;            var strength = getStrength(currentArmies, expectedArmies, countries);                  if(curpid) // if not neutral            {		if (curpid!=UID) // if not UNKNOWN		{	                statsStr+= "<tr>" +                             makeTableCellText(isEliminated, curpid, nameStr) +                             ( m_bonusCards?  makeTableCellText(isEliminated, curpid, cardStr) :"" ) +                            makeTableCellText(isEliminated, curpid, playersArray[name]._skipped) +                             makeTableCellText(isEliminated, curpid,  playersArray[name]._armies +" ( " + pctArmies +"% )"); 			if (fog)                            statsStr+= makeTableCellText(isEliminated, curpid, playersArray[name]._countries + " ( " + pctCountries +"% ) [ "+playersArray[name]._calculatedCountries+" (" + pctCalcCountries +"%) ]"+ playersArray[name].calcKillToReduce());			else                            statsStr+= makeTableCellText(isEliminated, curpid, playersArray[name]._countries + " ( " + pctCountries +"% ) " + playersArray[name].killToReduce());                        statsStr+= makeTableCellText(isEliminated, curpid, pl_Strength) +                             makeTableCellTextWrap(isEliminated, curpid, playersArray[name]._lastBonus) +                             makeTableCellText(isEliminated, curpid, "("+ numArmiesNextTurn +" + " + playersArray[name]._continentBonus + " + " + playersArray[name]._territoryBonus + ") = " + (numArmiesNextTurn + playersArray[name]._continentBonus + playersArray[name]._territoryBonus) );			if (playersArray[name]._skipped==0)			    statsStr+= makeTableCellTextWrap(isEliminated, curpid, playersArray[name]._deferred );			else			    statsStr+= makeTableCellTextWrap(isEliminated, curpid, ((numArmiesNextTurn + playersArray[name]._continentBonus)*(playersArray[name]._skipped)) );                            statsStr+= ( m_bonusCards  ? makeTableCellText(isEliminated, curpid, estimatedArmiesFromCards) : "" )+                             makeTableCellTextWrap(isEliminated, curpid, playersArray[name].ContinentsDisplay()) +                             "</tr>\n";        	        statsStr2+=                                "<tr>" +                            makeTableCellText(isEliminated, curpid, nameStr) +                             ( m_bonusCards?  makeTableCellText(isEliminated, curpid, cardStr) :"" ) +                            makeTableCellText(isEliminated, curpid, playersArray[name]._skipped) +                             makeTableCellText(isEliminated, curpid, playersArray[name]._armies); 			if (fog)                            statsStr2+= makeTableCellText(isEliminated, curpid, playersArray[name]._countries+" [ "+playersArray[name]._calculatedCountries+" ]");			else                            statsStr2+= makeTableCellText(isEliminated, curpid, playersArray[name]._countries);                            statsStr2+= makeTableCellTextWrap(isEliminated, curpid, playersArray[name]._lastBonus) + 			    makeTableCellText(isEliminated, curpid, ((numArmiesNextTurn + playersArray[name]._continentBonus + playersArray[name]._territoryBonus)));			if (playersArray[name]._skipped==0)			    statsStr2+= makeTableCellTextWrap(isEliminated, curpid, playersArray[name]._deferred );			else                            statsStr2+= makeTableCellTextWrap(isEliminated, curpid, ((numArmiesNextTurn + playersArray[name]._continentBonus)*(playersArray[name]._skipped)) );                            statsStr2+= makeTableCellTextWrap(isEliminated, curpid, playersArray[name].ContinentsDisplay()) +                             "</tr>\n";		}		else		{			pid = playersArray["Neutral"]._pid;	                unk +=        "<tr><td><span class='player"+ pid +"'>"+ nameStr + "</span></td>" +                            "" + ( m_bonusCards?"<td></td>":"" )+                            "<td></td>" + // Skiped                            "<td><span class='player"+ pid +"'>"+ playersArray[name]._armies +" ( " + pctArmies +"% )</span></td>" +                            "<td><span class='player"+ pid +"'>"+ playersArray[name]._countries + " ( " + pctCountries +"% )</span></td>" +                            "<td></td>" +                            "" + ( m_bonusCards ?"<td></td>":"" )+                            "<td></td>" +                             "<td></td>" +                            "<td></td>" +                            "</tr>\n";	                unk2 +=      "<tr><td><span class='player"+ pid +"'>"+ nameStr + "</span></td>" +                            "" + ( m_bonusCards?"<td></td>":"" )+                            "<td></td>" +                            "<td><span class='player"+ pid +"'>"+ playersArray[name]._armies +" </span></td>" +                            "<td><span class='player"+ pid +"'>"+ playersArray[name]._countries + " </span></td>" +                            "<td></td>" +                            "<td></td>" +                            "<td></td>" +                            "</tr>\n";		}            }            else //neutral            {                tmp =        "<tr><td><span class='player"+ playersArray[name]._pid +"'>"+ nameStr + "</span></td>" +                            "" + ( m_bonusCards?"<td></td>":"" )+                            "<td></td>" + // Skiped                            "<td><span class='player"+ playersArray[name]._pid +"'>"+ playersArray[name]._armies +" ( " + pctArmies +"% )</span></td>" +                            "<td><span class='player"+ playersArray[name]._pid +"'>"+ playersArray[name]._countries + " ( " + pctCountries +"% )</span></td>" +                            "<td><span class='player"+ playersArray[name]._pid +"'>"+ pl_Strength +"</span></td>" +                            "" + ( m_bonusCards ?"<td></td>":"" )+                            "<td></td>" +                             "<td></td>" +                            "<td></td>" +                            "</tr>\n";                tmp2 =      "<tr><td><span class='player"+ playersArray[name]._pid +"'>"+ nameStr + "</span></td>" +                            "" + ( m_bonusCards?"<td></td>":"" )+                            "<td></td>" +                            "<td><span class='player"+ playersArray[name]._pid +"'>"+ playersArray[name]._armies +" </span></td>" +                            "<td><span class='player"+ playersArray[name]._pid +"'>"+ playersArray[name]._countries + " </span></td>" +                            "<td></td>" +                            "<td></td>" +                            "<td></td>" +                            "</tr>\n";            }                                LastTeamID = teamID;        }    }    if (isTeamGame())     {                pctArmies = Math.round(teamArmies*100/totalArmies);                pctCountries = Math.round(teamTerritories*100/totalCountries);                            curpid = 0;                nameStr = "Team " + teamID;                isEliminated = false;                statsStr+= "<tr>" +                             makeTableCellText(isEliminated, curpid, nameStr) +                             ( m_bonusCards?  makeTableCellText(isEliminated, curpid, "") :"" ) +                            makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid,  teamArmies +" ( " + pctArmies +"% )") +                             makeTableCellText(isEliminated, curpid, teamTerritories + " ( " + pctCountries +"% ) " ) +                             makeTableCellText(isEliminated, curpid, teamStrength) +                             makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid, "") +                             "</tr>\n";                statsStr2+=                                                "<tr>" +                            makeTableCellText(isEliminated, curpid, nameStr) +                             ( m_bonusCards?  makeTableCellText(isEliminated, curpid, "") :"" ) +                            makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid,  teamArmies +" ( " + pctArmies +"% )") +                             makeTableCellText(isEliminated, curpid, teamTerritories + " ( " + pctCountries +"% ) " ) +                             makeTableCellText(isEliminated, curpid, "") +                             makeTableCellText(isEliminated, curpid, "") +                             "</tr>\n";    }        statsStr+= unk + tmp; //neutral & Unknowns    statsStr2+= unk2 + tmp2; //neutral & Unknowns       statsStr+="<tr style='font-weight:bold;color:#000;'><td>Totals</td>" + ( m_bonusCards?"<td></td>":"" )+"<td></td><td>" + totalArmies + " ( 100% )</td><td>" + totalCountries + " ( 100% )</td><td> - </td>" + ( m_bonusCards ?"<td> - </td>":"" )+"<td> - </td></tr>\n";    statsStr+= "</table>"    statsStr2+= "</table>"}function analyseMap(){	// replace all occurences of - with ~ -> this means we can split the array easily.    armiesArr = unsafeWindow.gameArmies.innerHTML.replace(/-/g,"~").split(/armies=|,|~|" alt="/);    var tmpArmies = new Array(); //temp holding for armies    var tmpCountries = new Array(); //temp holding for countries        for( i in playersArray ){ tmpArmies.push(0); tmpCountries.push(0); }    totalCountries = 0;    totalArmies = 0;    //Get individual scores    for( i = 0; i < armiesArr.length-1;i+=2 )    {	    if (armiesArr[i]=="?")	    {		pid = UID;		tmpCountries[pid]++;	    }	    else	    {		pid = parseInt( armiesArr[i] );		tmpArmies[pid]+= parseInt( armiesArr[i+1] );		tmpCountries[pid]++;	    }    }    i = 0;    for ( name in playersArray )    {        totalArmies += tmpArmies[i];        playersArray[name]._armies = tmpArmies[i];        totalCountries = totalCountries+tmpCountries[i];        playersArray[name]._countries = tmpCountries[i++];	// init ownership and bonuses out for all players...	playersArray[name]._continents = new Array();	playersArray[name]._continentBonus = 0;	playersArray[name]._territoryBonus = 0;    }	}function updateCountries(){	i=0;        for (country in countriesArray) 	{		var pid;		if (armiesArr[i*2]=="?")		{			pid = UID;		}		else		{			pid = parseInt( armiesArr[i*2] );		}		amrs = armiesArr[(i*2)+1];		countriesArray[country]._pid = pid;		countriesArray[country]._armies = amrs;		if (countriesArray[country]._bonus!=0 && pid>=0 && pid != UID)		{			for ( name in playersArray )			{				if (pid == playersArray[name]._pid)				{					if (countriesArray[country]._bonus<0)					{						if ((parseInt(countriesArray[country]._armies,10)+countriesArray[country]._bonus)>1) // if decay leaves more than 1 then bonus stands.						{							playersArray[name]._territoryBonus = playersArray[name]._territoryBonus + countriesArray[country]._bonus;						}						else // if decay goes beyond 1 then the bonus is negative the rest plus 1.						{							playersArray[name]._territoryBonus = (playersArray[name]._territoryBonus - countriesArray[country]._armies)+1;						}					}					else // if positive always happens.					{						playersArray[name]._territoryBonus = playersArray[name]._territoryBonus + countriesArray[country]._bonus;					}				}			}			}		i++;	}}function updateObjectives(){	var objSummary = "<h3>Objective Summary</h3>";	var show = false;	for (var obj in objectivesArray) 	{		show = true;		var objective = objectivesArray[obj];		objective._owner=-1;			var obSummary = "";		for (var j = 0; j < objective._countrys.length; j++ ) 		{			var cc = countriesArray[objective._countrys[j]];			obSummary += cc.displayString();			cc._inContenent = true;			if (cc._pid == UID)				objective._owner = -2;			if (objective._owner == -1) 			{				objective._owner = cc._pid;			}			if (objective._owner != cc._pid) 			{				objective._owner = -2; // NO OVERALL CONTROL			}      		            		}		if (objective._owner>-1)		{			var owner;			for (name in playersArray)			{				if (playersArray[name]._pid == objective._owner)				{					owner = name;				}			}			objSummary += '<br><span class="player' + objective._owner + '">'+objective._name+" ==> </span>";			obSummary+= '<span class="player' + objective._owner + '">'+" - Held by "+owner+"</span>";		}		else			objSummary += "<br><span>"+objective._name+" ==> </span>";			objSummary += obSummary;	}	if (show)	{		var objDiv = document.getElementById('objectives');		if (objDiv)		{				objDiv.innerHTML = objSummary;		}		else		{			objDiv = document.createElement('div');			objDiv.id="objectives";			dashboard.parentNode.insertBefore(objDiv, document.getElementById('chat').previousSibling.previousSibling.previousSibling);			objDiv.style.margin = '10px 0 0 0';			objDiv.innerHTML = objSummary;		}	}}function updateContinents(){	// roll through all the continents and assign ownership to each continent.	for (var continentn in continentsArray) 	{		var continent = continentsArray[continentn];		if (continent._required) // partial (required) continents		{			continent.clearOwners(); // empty continent of owners before processing						pids = new Array();			for (name in playersArray) // set up empty array for holding player counts of countries.			{				pids.push(0);			}			for (var j = 0; j < continent._countrys.length; j++ ) 			{				var cc = countriesArray[continent._countrys[j]];				cc._inContenent = true;				pids[cc._pid]++;			}			leng = pids.length;			if (fog)				leng--;			for (i=1;i<leng;i++) // 1 to start to avoid Neutral player			{				if (pids[i]>=continent._required)				{					for(name in playersArray)					{						if (playersArray[name]._pid == i) 						{							continent._owners.push(i);							continent._overriden.push(false);						}					}				}			}					}		else // whole (traditional) continents		{			continent._owner=-1;				for (var j = 0; j < continent._countrys.length; j++ ) 			{				var cc = countriesArray[continent._countrys[j]];				cc._inContenent = true;				if (cc._pid == UID)					continent._owner = -2;				if (continent._owner == -1) 				{					continent._owner = cc._pid;				}				if (continent._owner != cc._pid) 				{					continent._owner = -2; // NO OVERALL CONTROL				}       		            			}                }         }	// now we have all the owners we need to loop back through and work out if any continents need to override.	for (var continentn in continentsArray) 	{		var continent = continentsArray[continentn];		// if this continent is owned by anyone then we need to see if it's overriden.		if ((continent._required && continent._owners.length>0) || (continent.owner!=-2))		{						for (var continentn2 in continentsArray) 			{				var continent2 = continentsArray[continentn2];				// don't compare the same continents.				if (continent!=continent2)				{					// loop through overrides for this continent.					for (over in continent2._overrides)					{						// found a match.						if (continent2._overrides[over]==continent._name)						{							if (continent._required) // is continent a required continent?							{								if (continent2._required) // is continent2 a required continent?								{									for (owner in continent._owners)									{										for (owner2 in continent2._owners)										{											if (continent._owners[owner]==continent2._owners[owner2])											{												continent._overriden[owner]=true;											}										}									}								}								else								{									for (owner in continent._owners)									{										if (continent._owners[owner]==continent2._owner)										{											continent._overriden[owner]=true;										}									}								}							}							else							{								if (continent2._required) // is continent2 a required continent?								{									for (owner2 in continent2._owners)									{										if (continent._owner==continent2._owners[owner2])										{											continent._overriden=true;										}									}								}								else								{									if (continent._owner==continent2._owner)									{										continent._overriden=true;									}								}							}						}					}				}			}		}		// now we've established ownership and overriden ness we then need to assign the bonuses and owner ship to the players.		if (continent._required)		{			for (owner in continent._owners)			{				for(name in playersArray)				{					if (playersArray[name]._pid == continent._owners[owner]) 					{						if (!continent._overriden[owner])						{							playersArray[name]._continents.push(continentn);							playersArray[name]._continentBonus += continent._bonus;						}					}				}			}		}		else		{			if (continent._owner != -2 && (!continent._overriden))			{				for(name in playersArray)				{					if (playersArray[name]._pid == continent._owner) 					{               					playersArray[name]._continents.push(continentn);						playersArray[name]._continentBonus += continent._bonus;					}				}			}		}	}}function updateTextmap(){//               init for Text Based Map 	txtMapHtml = "<h3>Text Map</h3>";	txtMapSmallHtml = "";	txtMapSmallHtml2 = "";	txtMapSmallOwner = "";	bDone = false;	for (var continentn in continentsArray) 	{		txtMapSmallOwner = "";		var continent = continentsArray[continentn];		bDone = true;		txtMapHtml += '<h4 ><span class="JumpClick" title="' + continentn + '">' + continent._name + ' (' +  continent._bonus + ')</span></h4>'; 		txtMapSmallHtml2 = "";		for (var j = 0; j < continent._countrys.length; j++ ) 		{			var cc = countriesArray[continent._countrys[j]];			cc._inContenent = true;			txtMapSmallHtml2  +=  cc.displayString();                   					txtMapHtml += cc.displayString() + ' ==> ['; 			for (var k =0; k < cc._borders.length; k++)			{				var bb = countriesArray[cc._borders[k]];				txtMapHtml += bb.displayString();			}			txtMapHtml += ']';			if (cc._bombards.length>1)			{				txtMapHtml += ' __> ['; 				for (var k =0; k < cc._bombards.length; k++)				{					var bb = countriesArray[cc._bombards[k]];					txtMapHtml += bb.displayString();				}				txtMapHtml += ']';			}			txtMapHtml += '<br>';		}		if (continent._required)		{			for (i in continent._owners)			{				for (name in playersArray)				{					if (playersArray[name]._pid == continent._owners[i]) 					{						if (!continent._overriden[i])						{							txtMapHtml += '<br><span class="player' + continent._owners[i] + '"> BONUS for ' + name + ' : ' + continent._bonus + ' </span>';							txtMapSmallOwner = 'class="player' + continent._owners[i] +'"';					                txtMapSmallHtml += '<tr><td nowrap><span ' + txtMapSmallOwner + '><b><span class="JumpClick" title="' + continentn + '">' + continent._name + ' (' +  continent._bonus + ')</span></b></span>&nbsp;&nbsp;</td><td> ' + txtMapSmallHtml2 + '</td></tr>';						}					}				}			}			if (continent._owners.length<1)		                txtMapSmallHtml += '<tr><td nowrap><span ' + txtMapSmallOwner + '><b><span class="JumpClick" title="' + continentn + '">' + continent._name + ' (' +  continent._bonus + ')</span></b></span>&nbsp;&nbsp;</td><td> ' + txtMapSmallHtml2 + '</td></tr>';		}		else		{			if (continent._owner != -2 && (!continent._overriden))			{				for(name in playersArray)				{					if (playersArray[name]._pid == continent._owner)					{				                txtMapHtml += '<br><span class="player' + continent._owner + '"> BONUS for ' + name + ' : ' + continent._bonus + ' </span>';						txtMapSmallOwner = 'class="player' + continent._owner +'"';					}				}			}	                txtMapSmallHtml += '<tr><td nowrap><span ' + txtMapSmallOwner + '><b><span class="JumpClick" title="' + continentn + '">' + continent._name + ' (' +  continent._bonus + ')</span></b></span>&nbsp;&nbsp;</td><td> ' + txtMapSmallHtml2 + '</td></tr>';		}	}//		Add Text Map	cc_log("Adding Text Map");            	if (bDone) 	{		var txtMapHtml2 = "";                var bDone2 = false;		txtMapHtml2 += '<h4>No Continent</h4>'; 		txtMapSmallHtml2 = "";         		for (var countr in countriesArray) 		{                    var cc = countriesArray[countr];                    if (!cc._inContenent) 		    {                      	txtMapHtml2 +=  cc.displayString() + '==> [';                       	txtMapSmallHtml2 +=  cc.displayString()                      	for (var k =0; k < cc._borders.length; k++)			{                        	var bb = countriesArray[cc._borders[k]];                            	txtMapHtml2 += bb.displayString();                            			}			txtMapHtml2 += ']';			if (cc._bombards.length>1)			{				txtMapHtml2 += ' __> ['; 				for (var k =0; k < cc._bombards.length; k++)				{					var bb = countriesArray[cc._bombards[k]];					txtMapHtml2 += bb.displayString();				}			}			txtMapHtml2 += '<br>';                    	bDone2 = true;                    }                 }                 if (bDone2) 		 {                    txtMapHtml += txtMapHtml2;                    txtMapSmallHtml += '<tr><td nowrap><span><b>No Continent</b></span>&nbsp;&nbsp;</td><td> ' + txtMapSmallHtml2 + '</td></tr>';                 }	}	else	{                 txtMapHtml += '<h2>No Continents</h2>';                  for (var countr in countriesArray) 	         {                    var cc = countriesArray[countr];                                        txtMapHtml += cc.displayString() + ' ==> ['; 	            txtMapSmallHtml2 +=  cc.displayString();                                      for (var k =0; k < cc._borders.length; k++)		    {                        var bb = countriesArray[cc._borders[k]];                            txtMapHtml += bb.displayString();                    }                    txtMapHtml += ' ]<br>';                 }                 txtMapSmallHtml += '<tr><td nowrap><span><b>No Continent</b></span>&nbsp;&nbsp;</td><td> ' + txtMapSmallHtml2 + '</td></tr>';	}}function reinitClock(){	var response = unsafeWindow.request.responseText.split("&");        timeStr = response[2];        time = timeStr.split("\n");/*        hours1 = parseInt(time[0]);       	minutes1 = parseInt(time[1]);        seconds1 = parseInt(time[2]);*/        //Yowsers clock fix        hours1 = parseInt(time[0],10);        minutes1 = parseInt(time[1],10);        seconds1 = parseInt(time[2],10); }function getCardType(){    var dash = dashboard.innerHTML    if( dash.indexOf("Escalating") > -1 )        m_bonusCards = eBonusCards.ESCALATING;    else if( dash.indexOf("Flat Rate") > -1 )        m_bonusCards = eBonusCards.FLATRATE;    else         m_bonusCards = eBonusCards.NOCARDS;}function recalcRedemption(){	RedemptionValue = calcRedemption();	if(m_bonusCards == eBonusCards.ESCALATING)		redemption.innerHTML = "<table><tr><td colspan=2>Next Redemption Value is <b>" + RedemptionValue +".</b></td></tr></table>";	else if(m_bonusCards == eBonusCards.FLATRATE)		redemption.innerHTML = "<table><tr><td colspan=2><font color=red><b>Red:</b></font> 4&nbsp;<font color=green><b>Green:</b></font> 6&nbsp;<font color=blue><b>Blue:</b></font> 8&nbsp;<b>Mixed:</b> 10</td></tr></table>";	else 		redemption.innerHTML = "";}function updatePlayerCards(){    //    --- Get Player Card Counts ---    var tmp2 = getElementsByClassName(rightside,"li","status");        for ( i in tmp2 )     {        var indx = tmp2[i].innerHTML.has("Assassin Target") ? 2:1;        var tmp3 = tmp2[i].textContent.split(/\W/);        playersArray[pIndxs[i].innerHTML]._cards=parseInt(tmp3[indx]);    }}function getLeft(length){	if (length==1)		return 6;	return 2;}function GET_MAPLEFT(OPTIONS,mapName) {	var left = 0;	if (typeof(OPTIONS["MapLeft:"+mapName])=="undefined")         {            left = OPTIONS["MapLeft"];        }        else        {            left = OPTIONS["MapLeft:" + mapName];        }	if (!left)		left = 0;	return left;}function GET_MAPTOP(OPTIONS,mapName) {	var top = 0;	if (typeof(OPTIONS["MapTop:"+mapName])=="undefined")         {            top = OPTIONS["MapTop"];        }        else        {            top = OPTIONS["MapTop:" + mapName];        }	if (!top)		top = 0;	return top;}function SHIFT_MAGICMAP(options, name){        var mm = document.getElementById("magicmap");        left = 12 + GET_MAPLEFT(options,name);        top = 22 + GET_MAPTOP(options,name);	mm.style.top= top+"px";	mm.style.left= left+"px";}function updateMagicMap(){	var magicmap = document.getElementById('magicmap');	magicmap.innerHTML =  map.innerHTML;	magicmap.style.position="absolute";	SHIFT_MAGICMAP(myOptions, mapName);	if (mapSize=="L")	{		magicmap.style.height=largeheight;		magicmap.style.width=largewidth;	}	else	{		magicmap.style.height=smallheight;		magicmap.style.width=smallwidth;	}	if (!myOptions['mapInspect']) // only bother dicking about in here if we have this on - this will save us time!! (above stuff for non map fade numbers!);		return;	var mmaphtml = "";//             -- And magic map squares --             for (var cou in countriesArray) 	    {                var cc = countriesArray[cou];                var highlightType;                if (cc.isSafe()==2)   		{                    // Compleatly Safe                    if (m_gameType == eGameType.DOUBLES || m_gameType == eGameType.TRIPLES || m_gameType == eGameType.QUADRUPLES) 		    {                                                highlightType = "m";                    }                    else 		    {                        highlightType = "n";                    }                }                else if (cc.isSafe()==1)  		{                    // Team Internal                    highlightType = "n";                }                else                {                    // Enemy Border                    highlightType = "l";                }		var pid = cc._pid;		if (pid == UID)			pid = NID; // set pid to neutral colour...                mmaphtml += "<div ID='ARMY"+cc._name.makeID()+"' class='" + highlightType + "player"+pid+"' style='height:18px; width: " + (12 + ((""+cc._armies).length) *8 ) + "px;  left:";		if (mapSize=='S')			mmaphtml += (parseInt(cc._smallxPos)-11);		else			mmaphtml += (parseInt(cc._largexPos)-11);		mmaphtml += "px; top:";		if (mapSize=='S')			mmaphtml += (parseInt(cc._smallyPos)-37) +"px;'>";		else			mmaphtml += (parseInt(cc._largeyPos)-37) +"px;'>";		mmaphtml += cc._name + "</div>";            }            magicmap.innerHTML += mmaphtml;    if ( myOptions['mapInspect']) {        cc_log("Attaching the hover handlers");      var onMouseOverPlayer = function () {         var mm =  document.getElementById('magicmap');        var arrElements = mm.getElementsByTagName("div");        var oElement;        for(var i=0; i<arrElements.length; i++)        {            oElement = arrElements[i];            if(oElement.className.has("l" + this.className))                {                oElement.className  ="h" + this.className;                }            if(oElement.className.has("m" + this.className))                {                oElement.className  ="i" + this.className;                }                      if(oElement.className.has("n" + this.className))                {                oElement.className  ="j" + this.className;                }        }      } ;     var onMouseOverTeam = function (player) {        var mm =  document.getElementById('magicmap');            var arrElements = mm.getElementsByTagName("div");            var oElement;            for(var i=0; i<arrElements.length; i++)            {                oElement = arrElements[i];                if(oElement.className.has("l" + player))                    {                        oElement.className  ="h" + player;                    }                                if(oElement.className.has("m" + player))                    {                        oElement.className  ="i" + player;                    }                if(oElement.className.has("n" + player))                    {                        oElement.className  ="j" + player;                    }            }        } ;        var makeHandlerMOT = function (n) {         return function () {onMouseOverTeam (n);}        };                  var onMouseOutHover = function () {        var mm =  document.getElementById('magicmap');       var arrElements = mm.getElementsByTagName("div");        var oElement;        for(var i=0; i<arrElements.length; i++){            oElement = arrElements[i];          if(oElement.className.substring(0,1)=="h"){                oElement.className  ="l" + oElement.className.substring(1);            }          if(oElement.className.substring(0,1)=="i"){                oElement.className  ="m" + oElement.className.substring(1);            }          if(oElement.className.substring(0,1)=="j"){                oElement.className  ="n" + oElement.className.substring(1);            }        }        var hoverInfo = document.getElementById("hoverInfo");        hoverInfo.innerHTML = "";    } ;          var onMouseOverTerritory = function mm123 (n) { 	            var args = mm123.arguments;        for (var i = 0; i < args.length; i++) {            var oElement =  document.getElementById("ARMY" +args[i]);            if(oElement.className.substring(0,1)=="l"){                oElement.className  ="h" + oElement.className.substring(1);            }            if(oElement.className.substring(0,1)=="m"){                oElement.className  ="i" + oElement.className.substring(1);            }            if(oElement.className.substring(0,1)=="n"){                oElement.className  ="j" + oElement.className.substring(1);            }        }        } ;       var makeHandler = function (n) {        return function () {onMouseOverTerritory(n);}    };        var onMouserOverShowName = function mm123321 (n) {        var hoverInfo = document.getElementById("hoverInfo");        hoverInfo.innerHTML = n;        };     var makeHandlerName = function (n) {        return function () {onMouserOverShowName(n);}        };  cc_log("Attaching the hover handlers (MAP SQUARES)");        // Add Rollovers to map squares   var mm1 =  document.getElementById('magicmap');    var arrElements1 = mm1.getElementsByTagName("div");    var oElement1;        for(var i=0; i<arrElements1.length; i++) // change this from 2 to 1 for non background	{	     oElement1 = arrElements1[i];	             var title = oElement1.innerHTML; // uncomment this and comment 2 above for non background		if (title.indexOf('&')>-1)		{			title = title.replace("&amp;",/&/);			title = title.replace("&lt;",/</);			title = title.replace("&gt;",/>/);		}             oElement1.addEventListener('mouseout', onMouseOutHover , true); 	     oElement1.innerHTML = ""; // swap this line for non background             var c = countriesArray[title];             oElement1.addEventListener('mouseover', makeHandlerName(c.textMap()) , true);                                        for (var border in  c._borders) {                    var b = c._borders[border].makeID();                    oElement1.addEventListener('mouseover', makeHandler(b) , true);              };                 for (var border in  c._DefendBorders) {                    var b = c._DefendBorders[border].makeID();                    oElement1.addEventListener('mouseover', makeHandler(b) , true);              };             for (var bombard in  c._bombards) {                    var b = c._bombards[bombard].makeID();                    oElement1.addEventListener('mouseover', makeHandler(b) , true);              };             for (var bombard in  c._bombardedBy) {                    var b = c._bombardedBy[bombard].makeID();                    oElement1.addEventListener('mouseover', makeHandler(b) , true);              };        }  cc_log("Attaching the hover handlers (CARDS)");      // Add Rollovers to cards    var allC = getElementsByClassName(document.getElementById('dashboard'), "span","card");    for( i in allC ) {        var title = allC[i].innerHTML;	if (colourblind=="Y")		title = title.substring(2);	if (title.indexOf('&')>-1)	{		title = title.replace("&amp;",/&/);		title = title.replace("&lt;",/</);		title = title.replace("&gt;",/>/);	}        var c = countriesArray[title];                allC[i].addEventListener('mouseover', makeHandlerName(c.textMap()) , true);                    allC[i].addEventListener('mouseover', makeHandler(title.makeID()) , true);         allC[i].addEventListener('mouseout', onMouseOutHover , true);         }   cc_log("Attaching the hover handlers (PLAYERS)");      // Add Rollovers to playernames    var allP = getElementsByClassName(document.getElementById('right_hand_side'), "span","player");    for( i in allP ) {                allP[i].addEventListener('mouseover', onMouseOverPlayer , true);         allP[i].addEventListener('mouseout', onMouseOutHover , true);         }      cc_log("Attaching the hover handlers (TEAMS)");      // Add Rollovers to Team.    var allT = getElementsByClassName(document.getElementById('right_hand_side'), "li","");    var playerNumber = 1;    for (i in allT) {    if (allT[i].innerHTML.has("Team")) {                        allT[i].addEventListener('mouseout', onMouseOutHover , true);            if (m_gameType == eGameType.TRIPLES ) {                // This is 3v3                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                            }            else if (m_gameType == eGameType.DOUBLES ) {                // The next 2 players                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)            }            else if (m_gameType == eGameType.QUADRUPLES ) {                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)                allT[i].addEventListener('mouseover', makeHandlerMOT('player' + (playerNumber++)) , true)            }        }    }   cc_log("Attaching the click handlers");     var cntryClickHandler = function cntryClickHandler(cntryName)    {	if ( myOptions['mapInspect']) // only do stuff if map inspect is on!!	{	        window.setTimeout(jtm,100);	        window.setTimeout(makeHandler(cntryName.makeID()),200);        	window.setTimeout(onMouseOutHover,300);	        window.setTimeout(makeHandler(cntryName.makeID()),400);        	window.setTimeout(onMouseOutHover,500);	        window.setTimeout(makeHandler(cntryName.makeID()),600);        	window.setTimeout(onMouseOutHover,700);	        window.setTimeout(makeHandler(cntryName.makeID()),800);        	window.setTimeout(onMouseOutHover,900);	        window.setTimeout(makeHandler(cntryName.makeID()),1000);        	window.setTimeout(onMouseOutHover,1100);	        window.setTimeout(makeHandler(cntryName.makeID()),1200);        	window.setTimeout(onMouseOutHover,1300);	        window.setTimeout(makeHandler(cntryName.makeID()),1400);        	window.setTimeout(onMouseOutHover,1500);	        window.setTimeout(makeHandler(cntryName.makeID()),1600);        	window.setTimeout(onMouseOutHover,1700);	        window.setTimeout(makeHandler(cntryName.makeID()),1800);        	window.setTimeout(onMouseOutHover,1900);	        window.setTimeout(makeHandler(cntryName.makeID()),2000);        	window.setTimeout(onMouseOutHover,2100);	}    }    var MakeCntryClickHandler = function MakeCntryClickHandler(c)     {        return function () { cntryClickHandler(c);};    }    var MakeCntntClickHandler = function MakeCntryClickHandler(c)     {        return function () {                         var cs = c.split(/,/);            for (var css in cs) {                var csss = cs[css];                var ctn = continentsArray[csss];                for (var t in ctn._countrys) {                        cntryClickHandler(countriesArray[ctn._countrys[t]]._name);                }            }                };    }        // Add Click Handlers to Text Map        var allCntry = getElementsByClassName(document.getElementById('textMap'), "span","clickJump");        for (i in allCntry) 	{            allCntry[i].addEventListener('click', MakeCntryClickHandler(allCntry[i].title) , true)                    }        var allCntry = getElementsByClassName(document.getElementById('textMap'), "span","JumpClick");        for (i in allCntry) 	{            allCntry[i].addEventListener('click', MakeCntntClickHandler(allCntry[i].title) , true)                    }        // Add Click Handler to stats        var allCntry = getElementsByClassName(document.getElementById('statsTable'), "span","JumpClick");        for (i in allCntry) 	{            allCntry[i].addEventListener('click', MakeCntntClickHandler(allCntry[i].title) , true)                    }        var allCntry = getElementsByClassName(document.getElementById('statsTable'), "span","clickJump");        for (i in allCntry) 	{            allCntry[i].addEventListener('click', MakeCntryClickHandler(allCntry[i].title) , true)        }    }}// upgrade refreshGMScript with new version.unsafeWindow.refreshGMScript = function(){	colourblind = unsafeWindow.colourblind;	map = unsafeWindow.gameOuterMap;	mapSize = unsafeWindow.mapResolution;	processLog(logFixed, false);	reinitClock(); // call to ensure clock is correct.	recalcRedemption();	updatePlayerCards();	analyseMap(); // reread the armies array back into the players array...	updateCountries();	updateContinents();	updateObjectives();	createStats();	updateTextmap();	APPLY_TEXTMAP(myOptions);	APPLY_STATS(myOptions);	updateMagicMap();	colourCodeDD();	updateMenuHiderHeight();	return true;}function showMapInspectDiv(){    var mapInspectDiv = document.getElementById('mapinspect');    var mapInspetHTML = myOptions['mapInspect'] ? "<table><tr><td colspan=2>Map Inspect: <b><span id=hoverInfo /></b></td></tr></table>":"";    mapInspectDiv.innerHTML = mapInspetHTML;}var newfilterTo = unsafeWindow.filterTo;unsafeWindow.filterTo = function(selected) {	{		newfilterTo(selected);		colourCodeDD();	}};function colourCodeDD(){	cc_log("Color Coding the Drop downs");//     		--- Color Code the TO drop down ---	var tocountry = document.getElementById('to_country');	if (tocountry) 	{		// We have the to drop down on Screen		var tcopts = tocountry.options;		for (var ttt =0 ; ttt < tcopts.length; ttt++)		{			var toop = tcopts[ttt];			var cntry = countriesArray[toop.text];			if (!cntry) // if we can't find the country - then we need to remove the brackets.			{				bracket = toop.text.lastIndexOf("(");				if (bracket!=-1)				{					toop.text = toop.text.substring(0,bracket); // remove stuff after the bracket so that we can find the country OK.				}				cntry = countriesArray[toop.text];			}			var owner = cntry._pid;			toop.innerHTML += " (" + cntry._armies + ")";			toop.className = "playerBG"+owner;		}	}//     		--- Color Code the from drop down ---	var fromcountry = document.getElementById('from_country');	if (fromcountry) 	{		// We have the to drop down on Screen		var tcopts = fromcountry.options;		for (var ttt =0 ; ttt < tcopts.length; ttt++)		{			var toop = tcopts[ttt];			var cntry = countriesArray[toop.text];			if (!cntry) // if we can't find the country - then we need to remove the brackets.			{				bracket = toop.text.lastIndexOf("(");				if (bracket!=-1)				{					toop.text = toop.text.substring(0,bracket); // remove stuff after the bracket so that we can find the country OK.				}				cntry = countriesArray[toop.text];			}			var owner = cntry._pid;			toop.innerHTML += " (" + cntry._armies + ")";			toop.className = "playerBG"+owner;		}	}}function prepareMenuHider(){    // hide the menu to start with...    hideMenu();    // add events to hide the menu again.    var centre = document.getElementById("middleColumn");    centre.addEventListener('mouseover', hideMenu, true);    var header = document.getElementById("masthead");    header.addEventListener('mouseover', hideMenu, true);    var footer = document.getElementById("footer");    footer.addEventListener('mouseover', hideMenu, true);    // add div to show the menu.    showDiv = document.createElement('div');    showDiv.id="showDiv";    showDiv.style.position = "absolute";    showDiv.style.width = "2%";    showDiv.style.height = document.height+"px";    showDiv.style.left=0;    showDiv.style.top=0;    document.body .appendChild(showDiv);    showDiv.addEventListener('mouseover', showMenu, true); }function updateMenuHiderHeight(){    var showDiv = document.getElementById("showDiv");    showDiv.style.height = document.height+"px";}function hideMenu(){	if (myOptions["hideMenu"]=="On")	{		var outerMenu = document.getElementById("outerColumnContainer");		var leftMenu = document.getElementById("leftColumn");		leftMenu.style.display = "none";		outerMenu.style.borderLeft = "0em solid #DDEEDD";	}}function showMenu(){	if (myOptions["hideMenu"]=="On")	{		var outerMenu = document.getElementById("outerColumnContainer");		var leftMenu = document.getElementById("leftColumn");		leftMenu.style.display = "inline";		outerMenu.style.borderLeft = "14em solid #DDEEDD";	}}// global vars so refresh function still has scope on them.var armiesArr;var playersArray = new Array();var countriesArray = new Array();var continentsArray = new Array();var objectivesArray = new Array();var logFixed;var theGame = new gm_ConquerClubGame(myOptions);
