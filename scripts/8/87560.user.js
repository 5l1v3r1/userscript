// ==UserScript==========<br /> 
// @name Travian<br /> 
// @author Jacky-Q – FDisk<br /> 
// @description Jack description of the farm machines, using various strategies to achieve the established automatic farm.<br /> // @include http://*.travian.*/dorf1.php<br /> // ==/UserScript========<br /> // TODO maybe graphical interface operation</p> <p>// Positioning for the key nodes<br /> var resourceMap = document.getElementById(”lmid2″).childNodes[2];<br /> var resourceLine = document.getElementById(”lres0″).childNodes[1].firstChild.firstChild;<br /> var wood = document.getElementById(”lrpr”).childNodes[3].childNodes[1];<br /> var busy = document.getElementById(”lbau1″);</p> <p>// Resource production rate<br /> s1 = wood.childNodes[0].childNodes[4].firstChild.firstChild.nodeValue / 1;<br /> s2 = wood.childNodes[2].childNodes[4].firstChild.firstChild.nodeValue / 1;<br /> s3 = wood.childNodes[4].childNodes[4].firstChild.firstChild.nodeValue / 1;<br /> s4 = wood.childNodes[6].childNodes[4].firstChild.firstChild.nodeValue / 1;</p> <p>// Global variables defined<br /> var resourceTypes = ['timber', 'soil', 'iron', 'food'];<br /> var strategys = new Array(null, ‘onratio’, ‘onorder’, ‘oncustom’, ‘onfull’);<br /> var targetBuilding = ”;<br /> var targetLv = ”;<br /> var buildingId = 0;<br /> var villageId = “”;<br /> var dragObj = null;<br /> var mouseOffset = null;<br /> var dragId;<br /> foodSituation = resourceLine.childNodes[16].childNodes[2].nodeValue;<br /> foodSituation = foodSituation.split(”/”);<br /> var workeravailable = Math.max(3, foodSituation[1] / 1 – foodSituation[0] / 1);</p> <p>// GM data storage<br /> var taskList = (GM_getValue(”taskList”) == null || GM_getValue(”taskList”) == ”) ? new Array() : GM_getValue(”taskList”).split(’,');<br /> //alert(”taskList[0]== ””+eval(taskList[0] == ”));<br /> var logMessage = GM_getValue(”logMessage”) == null ? ”: unescape(GM_getValue(”logMessage”));<br /> var logAmount = GM_getValue(”logAmount”) == null ? 10: GM_getValue(”logAmount”);<br /> var myRace = null; // (GM_getValue(”race”) == “Germanic” || GM_getValue(”race”) == “Farmer”) ? GM_getValue(”race”):null;<br /> var flag = GM_getValue(”auto”) == null ? false: GM_getValue(”auto”);<br /> var strategyId = GM_getValue(”strategy”) == null ? 0: GM_getValue(”strategy”);<br /> //alert(”myRace=”+myRace);<br /> /**<br /> * Automatic construction strategy:<br /> 1. Air (default),<br /> 2. Proportion<br /> 3. According to the fastest (lack of resources used),<br /> 4. According to custom order<br /> */</p> <p>var box = document.createElement(”input”);<br /> box.type = “checkbox”;<br /> box.id = “box”;<br /> box.checked = flag;<br /> document.getElementById(”lrpr”).appendChild(box);<br /> box.addEventListener(’click’, checkAuto, false);</p> <p>var sOption = document.createElement(”select”);<br /> sOption.innerHTML = “<option value=’0′> </ option> <option value=’1′> proportion of farming </ option> <option value=’2′ disabled=’disabled’> sequential farming </ option> <option value=’3′> custom farming </ option> <option value=’4′> warehouse explosion point farming </ option> “;<br /> sOption.id = “sOption”;<br /> sOption.selectedIndex = strategyId / 1;<br /> document.getElementById(”lrpr”).appendChild(sOption);<br /> sOption.addEventListener(’change’, selectStrategy, false);</p> <p>var listBox = document.createElement(”div”);<br /> listBox.id = “listBox”;<br /> document.getElementById(”lrpr”).appendChild(listBox);</p> <p>var MsgBox = createMsgBox();<br /> log(”");<br /> MsgBox.addEventListener(’click’, deleteLog, false);</p> <p>window.addEventListener(’load’, checkStrategy, false);<br /> window.addEventListener(’load’, checkAuto, false);<br /> //registerDrag();<br /> //document.addEventListener(’mousemove’,mousemove,false);<br /> //document.addEventListener(’mouseup’,mouseup,false);</p> <p>//=========== Function District =====================<br /> function checkAuto() {<br /> var box = document.getElementById(”box”);<br /> flag = box.checked;<br /> GM_setValue(”auto”, flag);<br /> // alert(”taskList.length when checkAuto”+taskList.length);<br /> if (flag) {<br /> getPersonPage();<br /> //	 if(myRace == “Farmer”){<br /> ////	 checkStrategy();<br /> //	 startBuilding();<br /> //	 }else if(myRace == “Germanic”){<br /> //	 alert(”What do you think, the stick?”);<br /> //	 box.checked = false;<br /> //	 }else{<br /> ////	 alert(”go to getPersonalPage.”);<br /> //	 }<br /> }<br /> }</p> <p>function checkStrategy() {<br /> if (strategyId == ‘1′ && taskList.length < 4) { reloadRatio(GM_getValue(’ratio’)); } else if (strategyId == ‘4′) { checkLatest(); } showTaskList(); } /** * CheckAvailble */ function checkAvailable() { //Are there scheduled if (taskList.length > 0) {<br /> // Are there during construction<br /> if (busy == null) {<br /> // Population is sufficient<br /> if (workeravailable > 3) {<br /> // Enough resources to carry out construction<br /> _waitTime = checkResource();<br /> if (_waitTime == 0) {<br /> return true;<br /> } else {<br /> _timeStamp = Math.ceil(_waitTime / 60000);<br /> window.setTimeout(”location.reload()”, _timeStamp * 60000);<br /> log(”construction” + targetBuilding + (targetLv / 1 + 1) + “inadequate resources, and is expected to” + _timeStamp + “minutes after.”);<br /> }<br /> } else {<br /> log(”insufficient population, and stop the construction of automatic”);<br /> }<br /> }<br /> }<br /> return false;<br /> }</p> <p>/**<br /> * checkResource<br /> * @param {String} option<br /> */<br /> function checkResource() {<br /> targetBuilding = resourceTypes[taskList[0] / 1];<br /> var _level = 0;<br /> var siteNo = new Array();</p> <p>	switch (targetBuilding) {<br /> case ‘Wood’:<br /> {<br /> siteNo.length = 0;<br /> siteNo = [1, 3, 14, 17];<br /> break;<br /> }<br /> case ‘mud’:<br /> {<br /> siteNo.length = 0;<br /> siteNo = [5, 6, 16, 18];<br /> break;<br /> }<br /> case ‘iron’:<br /> {<br /> siteNo.length = 0;<br /> siteNo = [4, 7, 10, 11];<br /> break;<br /> }<br /> case ‘food’:<br /> {<br /> siteNo.length = 0;<br /> siteNo = [2, 8, 9, 12, 13, 15];<br /> break;<br /> }<br /> }<br /> site1 = resourceMap.childNodes[siteNo[0] – 1].title;<br /> site2 = resourceMap.childNodes[siteNo[1] – 1].title;<br /> site3 = resourceMap.childNodes[siteNo[2] – 1].title;<br /> site4 = resourceMap.childNodes[siteNo[3] – 1].title;<br /> if (siteNo.length > 4) {<br /> site5 = resourceMap.childNodes[siteNo[4] – 1].title;<br /> site6 = resourceMap.childNodes[siteNo[5] – 1].title;<br /> var sites = new Array(site1, site2, site3, site4, site5, site6);<br /> } else {<br /> var sites = new Array(site1, site2, site3, site4);<br /> }<br /> for (var i = 0; i < sites.length; i++) { sites[i] = sites[i].substring(sites[i].lastIndexOf(’ ‘), sites[i].length); } for (var i = sites.length – 1; i > 0; i–) {<br /> for (var j = 0; j < i; j++) {<br /> if (sites[j + 1] < sites[j]) {<br /> var temp = siteNo[j];<br /> siteNo[j] = siteNo[j + 1];<br /> siteNo[j + 1] = temp;<br /> temp = sites[j];<br /> sites[j] = sites[j + 1];<br /> sites[j + 1] = temp;<br /> }<br /> }<br /> }</p> <p>	targetLv = _level = sites[0];<br /> buildingId = siteNo[0];<br /> // Check whether there are sufficient resources required<br /> rq = getResourceRequirement(targetBuilding, _level / 1);<br /> rs = new Array(4);<br /> temp = resourceLine.childNodes[3].firstChild.nodeValue;<br /> rs[0] = temp.substring(0, temp.toString().indexOf(’/'));<br /> temp = resourceLine.childNodes[7].firstChild.nodeValue;<br /> rs[1] = temp.substring(0, temp.toString().indexOf(’/'));<br /> temp = resourceLine.childNodes[11].firstChild.nodeValue;<br /> rs[2] = temp.substring(0, temp.toString().indexOf(’/'));<br /> temp = resourceLine.childNodes[14].firstChild.nodeValue;<br /> rs[3] = temp.substring(0, temp.toString().indexOf(’/'));<br /> var s = [s1, s2, s3, s4];<br /> _waitTime = 0;<br /> for (var index = 0; index < rq.length; index++) { if (rq[index] > rs[index]) {<br /> _waitTime = (rq[index] – rs[index]) / s[index] * 60 * 60 * 1000;<br /> }<br /> }<br /> return _waitTime;<br /> }</p> <p>function getResourceRequirement(t, l) {<br /> var resources = new Array(4);<br /> switch (t) {<br /> case ‘Wood’:<br /> {<br /> resources[0] = Math.round(Math.pow(1.67, l) * 40 / 5) * 5;<br /> resources[1] = Math.round(Math.pow(1.67, l) * 100 / 5) * 5;<br /> resources[2] = Math.round(Math.pow(1.67, l) * 50 / 5) * 5;<br /> resources[3] = Math.round(Math.pow(1.67, l) * 60 / 5) * 5;<br /> break;<br /> }<br /> case ‘mud’:<br /> {<br /> resources[0] = Math.round(Math.pow(1.67, l) * 80 / 5) * 5;<br /> resources[1] = Math.round(Math.pow(1.67, l) * 40 / 5) * 5;<br /> resources[2] = Math.round(Math.pow(1.67, l) * 80 / 5) * 5;<br /> resources[3] = Math.round(Math.pow(1.67, l) * 50 / 5) * 5;<br /> break;<br /> }<br /> case ‘iron’:<br /> {<br /> resources[0] = Math.round(Math.pow(1.67, l) * 100 / 5) * 5;<br /> resources[1] = Math.round(Math.pow(1.67, l) * 80 / 5) * 5;<br /> resources[2] = Math.round(Math.pow(1.67, l) * 30 / 5) * 5;<br /> resources[3] = Math.round(Math.pow(1.67, l) * 60 / 5) * 5;<br /> break;<br /> }<br /> case ‘food’:<br /> {<br /> resources[0] = Math.round(Math.pow(1.67, l) * 70 / 5) * 5;<br /> resources[1] = Math.round(Math.pow(1.67, l) * 90 / 5) * 5;<br /> resources[2] = Math.round(Math.pow(1.67, l) * 70 / 5) * 5;<br /> resources[3] = Math.round(Math.pow(1.67, l) * 20 / 5) * 5;<br /> break;<br /> }<br /> }<br /> return resources;<br /> }</p> <p>function checkRace(hxr2) {<br /> if (hxr2.readyState == 4) {<br /> if (hxr2.status == 200) {<br /> //	 alert(”go to checkRace”);<br /> var resText = hxr2.responseText;<br /> var rex = /race:</td> <td>W{2}W?/i;<br /> var race = resText.match(rex).toString();<br /> if (race != null) {<br /> race = race.substring(12, 13);<br /> // alert(”a”+race+”b”);<br /> //	 alert(”race == rierman == “æ—¥è€³”));<br /> if (race == “G”) {<br /> // alert(”Germanic here.”);<br /> //	 myRace = “Germanic”;<br /> alert(”What do you think, the stick?”);</p> <p>	 } else {<br /> //	 myRace = “Farmer”;<br /> startBuilding();<br /> }<br /> }<br /> //	 alert(”myRace=”+myRace);<br /> //	 GM_setValue(”race”,myRace);<br /> // location.reload(true);<br /> }<br /> }<br /> }</p> <p>/**<br /> * startBuilding<br /> *<br /> */<br /> function startBuilding() {<br /> if (checkAvailable()) {<br /> // alert(myRace);<br /> //Get links<br /> // alert(”available!”+”nbuildingId:”+buildingId);<br /> preUrl = “build.php?id=” + buildingId + “&temp=” + new Date().getTime();<br /> // alert(’preUrl=’+preUrl);<br /> var xrq1 = new XMLHttpRequest();<br /> // Default automatically in the fields of the state can not be sent: As the official script led to the conflict can not be directly exposed to GM script, the model should be used to resolve the incident.<br /> xrq1.open(”GET”, preUrl, true);<br /> xrq1.send(null);<br /> xrq1.onreadystatechange = function() {<br /> getVillageId(xrq1);<br /> };<br /> } else<br /> // log(”can not startBuilding”);<br /> return;<br /> }</p> <p>function getVillageId(xhr) {<br /> if (xhr.readyState == 4) {<br /> if (xhr.status == 200) {<br /> var resText = xhr.responseText;</p> <p>	 var rex = /dorf1.php?a=d?d&c=w{3,}/;<br /> var link = resText.match(rex);<br /> // alert(”link=”+link);<br /> if (link == null || link == “”) {<br /> //	 villageId=0;<br /> log(”can not get link”);<br /> return;<br /> } else {</p> <p>	 villageId = link.toString().substring(link.length – 4, link.length – 1);<br /> }<br /> xhr = new XMLHttpRequest();<br /> xhr.open(”GET”, link.toString() + “&temp=” + new Date().getTime(), true);<br /> xhr.send(null);<br /> //Refresh pages success, a failure Tips<br /> xhr.onreadystatechange = function() {<br /> callback(xhr);<br /> };</p> <p>	 // location.replace(link.toString());<br /> // return link;<br /> } else {<br /> return “error occurs.”;<br /> }<br /> } else {<br /> return “error occurs.”;<br /> }<br /> }<br /> /***<br /> * SelectStrategy<br /> * Set up farm strategy<br /> *<br /> */<br /> function selectStrategy() {<br /> strategyId = document.getElementById(”sOption”).selectedIndex;<br /> // alert(”strategyId=”+strategyId);<br /> GM_setValue(”strategy”, strategyId);<br /> switch (strategyId) {<br /> case 1:<br /> {<br /> // var r = window.prompt()<br /> //	 r1 = 29;r2 =31;r3=23;r4=19;<br /> var ratio = window.prompt(”click wood, clay, iron, food resources in the order set in proportion to byte characters ”, ”separated”);<br /> //	 var ratio=message.split(’,');<br /> GM_setValue(’ratio’, ratio);<br /> reloadRatio(ratio);<br /> GM_setValue(’taskList’, taskList.toString());<br /> break;<br /> }<br /> case 2:<br /> {<br /> taskList = new Array();</p> <p>	 break;<br /> }<br /> case 3:<br /> {<br /> var list = window.prompt(’representatives to 0,1,2,3 respectively wood, clay, iron, grain imported from the definition of the construction sequence, and byte characters  “, ” separated’, ”);<br /> if (list == “” || list == null) {<br /> taskList.length = 0;<br /> //	 GM_setValue(”taskList”,-1);<br /> } else {<br /> taskList = list.split(’,');<br /> GM_setValue(”taskList”, list);<br /> }<br /> break;<br /> }<br /> case 4:<br /> {<br /> checkLatest();<br /> GM_setValue(”taskList”, taskList.toString());<br /> break;<br /> }<br /> default:<br /> break;<br /> }</p> <p>	showTaskList();<br /> }</p> <p>/**<br /> * reloadRatio<br /> * @param {array} ratio<br /> */<br /> function reloadRatio(ratio) {<br /> // alert(’ratio=’+ratio);<br /> ratio = ratio.split(’,');<br /> r1 = ratio[0] / 1;<br /> r2 = ratio[1] / 1;<br /> r3 = ratio[2] / 1;<br /> r4 = ratio[3] / 1;<br /> var s = new Array(s1 / r1, s2 / r2, s3 / r3, s4 / r4);<br /> taskList = ['0', '1', '2', '3'];<br /> for (var i = s.length – 1; i > 0; i–) {<br /> for (var j = 0; j < i; j++) { if (s[j] > s[j + 1]) {<br /> _temp = s[j];<br /> s[j] = s[j + 1];<br /> s[j + 1] = _temp;<br /> _temp = taskList[j];<br /> taskList[j] = taskList[j + 1];<br /> taskList[j + 1] = _temp;</p> <p>	 }<br /> }<br /> }</p> <p>}</p> <p>function callback(xrq) {<br /> if (xrq.readyState == 4) {</p> <p>	 if (xrq.status == 200) {<br /> log(targetBuilding + (targetLv / 1 + 1) + “to begin building”);<br /> //	 alert(”after log in call funciton”);<br /> taskList.shift();<br /> //	 var list=”;<br /> //	 for each (ss in taskList){<br /> //	 list += list+ss+”,”;<br /> //	 }<br /> //	 alert(”taskList.length when callback”+taskList.length);<br /> GM_setValue(”taskList”, taskList.toString());<br /> location.assign(’dorf1.php’);<br /> } else {<br /> log(targetBuilding + “upgrade failure Bird”);<br /> }<br /> }<br /> }</p> <p>function log(msg) {<br /> var _box = document.getElementById(”MsgBox”);<br /> //TODO log of user settings<br /> if (_box == null) {<br /> _box = createMsgBox();<br /> _box.innerHTML = logMessage;<br /> }<br /> if (msg != null && msg != ”) {<br /> //	 alert(”logAmount=”+logAmount);<br /> updatelogAmount(logAmount – 1);<br /> var time = new Date();<br /> _hour = time.getHours() >= 10 ? time.getHours() : “0″ + time.getHours();<br /> _min = time.getMinutes() >= 10 ? time.getMinutes() : “0″ + time.getMinutes();</p> <p>	 logMessage += ” <li>” + msg + ” ” + _hour + “:” + _min + “</li> <p>”;<br /> GM_setValue(”logMessage”, escape(logMessage));<br /> }<br /> _box.innerHTML = logMessage;</p> <p>}</p> <p>function updatelogAmount(len) {<br /> while (_box.childNodes.length > len) {<br /> _box.removeChild(_box.firstChild);<br /> logMessage = logMessage.substring(logMessage.indexOf(’/') + 4, logMessage.length);<br /> }<br /> }</p> <p>/**<br /> * createLogConfig<br /> *<br /> */<br /> function createLogConfig(_box) {<br /> var _cf = document.createElement(”span”);<br /> _cf.id = “config”;<br /> // _cf.type = “button”;<br /> _cf.innerHTML = “Set log number (current” + logAmount + “)”;<br /> // _box =document.getElementById(”MsgBox”);<br /> document.body.insertBefore(_cf, _box);<br /> _cf.addEventListener(’click’, setLogAmount, false);<br /> }</p> <p>function setLogAmount() {<br /> var _logAmount = window.prompt(”Please set the maximum number of log records :”, ”);<br /> if (_logAmount == “” || _logAmount == null) return;<br /> GM_setValue(”logAmount”, _logAmount);<br /> updatelogAmount(_logAmount / 1);<br /> document.getElementById(”config”).innerHTML = “set log number (current” + _logAmount + “)”;<br /> }</p> <p>function deleteLog() {<br /> _box = document.getElementById(”MsgBox”);<br /> GM_setValue(’logMessage’, ”);<br /> document.body.removeChild(_box);</p> <p>	 // document.getElementById(”lright1″).removeChild(_box);<br /> }</p> <p>function createMsgBox() {<br /> _box = document.createElement(”ul”);<br /> _box.id = “MsgBox”;<br /> // _box.style.backgroundColor = “lightgreen”;<br /> //	_box.style.top = “400px”;<br /> //	_box.style.left = “200px”;<br /> _box.style.position = “right”;<br /> document.body.appendChild(_box);<br /> createLogConfig(_box);</p> <p>	return _box;<br /> }</p> <p>/**<br /> * showTaskList<br /> *<br /> */<br /> function showTaskList() {<br /> var listBox = document.getElementById(”listBox”);<br /> _addr1 = “<img src=”/img/un/r/”; _addr2 = “.gif” mce_src=”/img/un/r/”; _addr2 = “.gif” />”;<br /> _listContext = “”;<br /> // alert(”taskList.length when show taskList=”+taskList.length);<br /> if (taskList != null && taskList.length > 0) {<br /> for (var i = 0; i < taskList.length; i++) {<br /> _listContext += _addr1 + (taskList[i] / 1 + 1) + _addr2;<br /> }<br /> }<br /> listBox.innerHTML = _listContext;<br /> }</p> <p>/**<br /> * checkRace<br /> *<br /> */<br /> function getPersonPage() {<br /> _t = document.getElementById(”navi_table”);<br /> var _page = _t.childNodes[1].firstChild.childNodes[1].childNodes[5].href;<br /> // alert(”_page=”+_page);<br /> var hxq = new XMLHttpRequest();<br /> hxq.open(”GET”, _page, true);<br /> hxq.send(null);<br /> hxq.onreadystatechange = function() {<br /> checkRace(hxq);<br /> };<br /> }</p> <p>function registerDrag() {<br /> var _rs = resourceMap.childNodes;<br /> for (var i = 0; i < _rs.length; i++) { _rs[i].addEventListener(’mousedown’, mousedown, false); // _rs[i].addEventListener(’mosuemove’,mousemove,false); } } function mousedown(e) { dragObj = document.createElement(”area”); //	fackObj.createAttribute(’x',e.pageX); //	fackObj.createAttribute(’y',e.pageY); // dragObj = ; dragObj.setAttribute(’x', e.pageX); dragObj.setAttribute(’y', e.pageY); //	mouseOffset = getMouseOffset(dragObj,e); //	document.createAttribute(’x'); //	document.createAttribute() // mouseOffset(e.target,e); dragId = e.target.href.match(/d*/); e.target = dragObj; //	alert(dragId); //	alert(e.pageX); // fackObj.style.left = } function mousemove(ev) { //	ev = ev || window.event; // var mousePos = mouseCoords(ev); if (dragObj != null) { dragObj.x = ev.pageX; dragObj.y = ev.pageY; return false; } } function mouseup() { // alert(dragObj.x); if (dragObj != null) { if (dragObj.x > 600 && dragObj.y > 20) {<br /> addDragResource(dragId / 1);<br /> showTaskList();<br /> }<br /> }</p> <p>	dragObj = null;<br /> }</p> <p>// TODO integrate various resources strategy checkreource () should be concerned about importation of the id. Judge to the lowest level output remodeling in the new function call<br /> function addDragResource(id) {<br /> totalSiteNo = new Array([1, 3, 14, 17], [5, 6, 16, 18], [4, 7, 10, 11], [2, 8, 9, 12, 13, 15]);<br /> }</p> <p>function checkLatest() {<br /> var _r = new Array(4);<br /> var _s = [s1, s2, s3, s4];<br /> var _target = null;<br /> for (var i = 0; i < 4; i++) { if (4 * i + 3 > 11) {<br /> temp = resourceLine.childNodes[14].firstChild.nodeValue;<br /> } else {<br /> temp = resourceLine.childNodes[4 * i + 3].firstChild.nodeValue;</p> <p>	 }<br /> //	 alert(temp);<br /> _r[i] = temp.split(’/');<br /> _r[i][2] = _s[i];<br /> }<br /> temp2 = 0;<br /> for (var i = 0; i < _r.length; i++) {<br /> _fulltime = Math.round((_r[i][1] / 1 – _r[i][0] / 1) / _r[i][2] * 60);<br /> // alert(_fulltime);<br /> if (temp2 < _fulltime) {<br /> _target = i;<br /> temp2 = _fulltime;<br /> }<br /> }<br /> taskList = new Array();<br /> taskList[0] = _target;<br /> }